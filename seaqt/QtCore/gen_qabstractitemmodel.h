#pragma once
#ifndef SEAQT_QTCORE_GEN_QABSTRACTITEMMODEL_H
#define SEAQT_QTCORE_GEN_QABSTRACTITEMMODEL_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../libseaqt/libseaqt.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
class QAbstractItemModel;
class QAbstractListModel;
class QAbstractTableModel;
class QChildEvent;
class QDataStream;
class QEvent;
class QMetaMethod;
class QMetaObject;
class QMimeData;
class QModelIndex;
class QObject;
class QPersistentModelIndex;
class QSize;
class QTimerEvent;
class QVariant;
#else
typedef struct QAbstractItemModel QAbstractItemModel;
typedef struct QAbstractListModel QAbstractListModel;
typedef struct QAbstractTableModel QAbstractTableModel;
typedef struct QChildEvent QChildEvent;
typedef struct QDataStream QDataStream;
typedef struct QEvent QEvent;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QObject QObject;
typedef struct QPersistentModelIndex QPersistentModelIndex;
typedef struct QSize QSize;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
#endif

QModelIndex* QModelIndex_new();
QModelIndex* QModelIndex_new2(QModelIndex* param1);

int QModelIndex_row(const QModelIndex* self);
int QModelIndex_column(const QModelIndex* self);
uintptr_t QModelIndex_internalId(const QModelIndex* self);
void* QModelIndex_internalPointer(const QModelIndex* self);
QModelIndex* QModelIndex_parent(const QModelIndex* self);
QModelIndex* QModelIndex_sibling(const QModelIndex* self, int row, int column);
QModelIndex* QModelIndex_siblingAtColumn(const QModelIndex* self, int column);
QModelIndex* QModelIndex_siblingAtRow(const QModelIndex* self, int row);
QModelIndex* QModelIndex_child(const QModelIndex* self, int row, int column);
QVariant* QModelIndex_data(const QModelIndex* self);
int QModelIndex_flags(const QModelIndex* self);
QAbstractItemModel* QModelIndex_model(const QModelIndex* self);
bool QModelIndex_isValid(const QModelIndex* self);
bool QModelIndex_operatorEqual(const QModelIndex* self, QModelIndex* other);
bool QModelIndex_operatorNotEqual(const QModelIndex* self, QModelIndex* other);
bool QModelIndex_operatorLesser(const QModelIndex* self, QModelIndex* other);
QVariant* QModelIndex_data1(const QModelIndex* self, int role);

void QModelIndex_delete(QModelIndex* self);

QPersistentModelIndex* QPersistentModelIndex_new();
QPersistentModelIndex* QPersistentModelIndex_new2(QModelIndex* index);
QPersistentModelIndex* QPersistentModelIndex_new3(QPersistentModelIndex* other);

bool QPersistentModelIndex_operatorLesser(const QPersistentModelIndex* self, QPersistentModelIndex* other);
bool QPersistentModelIndex_operatorEqual(const QPersistentModelIndex* self, QPersistentModelIndex* other);
bool QPersistentModelIndex_operatorNotEqual(const QPersistentModelIndex* self, QPersistentModelIndex* other);
void QPersistentModelIndex_operatorAssign(QPersistentModelIndex* self, QPersistentModelIndex* other);
void QPersistentModelIndex_swap(QPersistentModelIndex* self, QPersistentModelIndex* other);
bool QPersistentModelIndex_operatorEqualWithOther(const QPersistentModelIndex* self, QModelIndex* other);
bool QPersistentModelIndex_operatorNotEqualWithOther(const QPersistentModelIndex* self, QModelIndex* other);
void QPersistentModelIndex_operatorAssignWithOther(QPersistentModelIndex* self, QModelIndex* other);
QModelIndex* QPersistentModelIndex_ToConstQModelIndexBitwiseAnd(const QPersistentModelIndex* self);
int QPersistentModelIndex_row(const QPersistentModelIndex* self);
int QPersistentModelIndex_column(const QPersistentModelIndex* self);
void* QPersistentModelIndex_internalPointer(const QPersistentModelIndex* self);
uintptr_t QPersistentModelIndex_internalId(const QPersistentModelIndex* self);
QModelIndex* QPersistentModelIndex_parent(const QPersistentModelIndex* self);
QModelIndex* QPersistentModelIndex_sibling(const QPersistentModelIndex* self, int row, int column);
QModelIndex* QPersistentModelIndex_child(const QPersistentModelIndex* self, int row, int column);
QVariant* QPersistentModelIndex_data(const QPersistentModelIndex* self);
int QPersistentModelIndex_flags(const QPersistentModelIndex* self);
QAbstractItemModel* QPersistentModelIndex_model(const QPersistentModelIndex* self);
bool QPersistentModelIndex_isValid(const QPersistentModelIndex* self);
QVariant* QPersistentModelIndex_data1(const QPersistentModelIndex* self, int role);

void QPersistentModelIndex_delete(QPersistentModelIndex* self);

typedef struct VirtualQAbstractItemModel VirtualQAbstractItemModel;
typedef struct QAbstractItemModel_VTable{
	void (*destructor)(VirtualQAbstractItemModel* self);
	QMetaObject* (*metaObject)(const VirtualQAbstractItemModel* self);
	void* (*metacast)(VirtualQAbstractItemModel* self, const char* param1);
	int (*metacall)(VirtualQAbstractItemModel* self, int param1, int param2, void** param3);
	QModelIndex* (*index)(const VirtualQAbstractItemModel* self, int row, int column, QModelIndex* parent);
	QModelIndex* (*parent)(const VirtualQAbstractItemModel* self, QModelIndex* child);
	QModelIndex* (*sibling)(const VirtualQAbstractItemModel* self, int row, int column, QModelIndex* idx);
	int (*rowCount)(const VirtualQAbstractItemModel* self, QModelIndex* parent);
	int (*columnCount)(const VirtualQAbstractItemModel* self, QModelIndex* parent);
	bool (*hasChildren)(const VirtualQAbstractItemModel* self, QModelIndex* parent);
	QVariant* (*data)(const VirtualQAbstractItemModel* self, QModelIndex* index, int role);
	bool (*setData)(VirtualQAbstractItemModel* self, QModelIndex* index, QVariant* value, int role);
	QVariant* (*headerData)(const VirtualQAbstractItemModel* self, int section, int orientation, int role);
	bool (*setHeaderData)(VirtualQAbstractItemModel* self, int section, int orientation, QVariant* value, int role);
	struct miqt_map /* of int to QVariant* */  (*itemData)(const VirtualQAbstractItemModel* self, QModelIndex* index);
	bool (*setItemData)(VirtualQAbstractItemModel* self, QModelIndex* index, struct miqt_map /* of int to QVariant* */  roles);
	struct miqt_array /* of struct miqt_string */  (*mimeTypes)(const VirtualQAbstractItemModel* self);
	QMimeData* (*mimeData)(const VirtualQAbstractItemModel* self, struct miqt_array /* of QModelIndex* */  indexes);
	bool (*canDropMimeData)(const VirtualQAbstractItemModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
	bool (*dropMimeData)(VirtualQAbstractItemModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
	int (*supportedDropActions)(const VirtualQAbstractItemModel* self);
	int (*supportedDragActions)(const VirtualQAbstractItemModel* self);
	bool (*insertRows)(VirtualQAbstractItemModel* self, int row, int count, QModelIndex* parent);
	bool (*insertColumns)(VirtualQAbstractItemModel* self, int column, int count, QModelIndex* parent);
	bool (*removeRows)(VirtualQAbstractItemModel* self, int row, int count, QModelIndex* parent);
	bool (*removeColumns)(VirtualQAbstractItemModel* self, int column, int count, QModelIndex* parent);
	bool (*moveRows)(VirtualQAbstractItemModel* self, QModelIndex* sourceParent, int sourceRow, int count, QModelIndex* destinationParent, int destinationChild);
	bool (*moveColumns)(VirtualQAbstractItemModel* self, QModelIndex* sourceParent, int sourceColumn, int count, QModelIndex* destinationParent, int destinationChild);
	void (*fetchMore)(VirtualQAbstractItemModel* self, QModelIndex* parent);
	bool (*canFetchMore)(const VirtualQAbstractItemModel* self, QModelIndex* parent);
	int (*flags)(const VirtualQAbstractItemModel* self, QModelIndex* index);
	void (*sort)(VirtualQAbstractItemModel* self, int column, int order);
	QModelIndex* (*buddy)(const VirtualQAbstractItemModel* self, QModelIndex* index);
	struct miqt_array /* of QModelIndex* */  (*match)(const VirtualQAbstractItemModel* self, QModelIndex* start, int role, QVariant* value, int hits, int flags);
	QSize* (*span)(const VirtualQAbstractItemModel* self, QModelIndex* index);
	struct miqt_map /* of int to struct miqt_string */  (*roleNames)(const VirtualQAbstractItemModel* self);
	bool (*submit)(VirtualQAbstractItemModel* self);
	void (*revert)(VirtualQAbstractItemModel* self);
	bool (*event)(VirtualQAbstractItemModel* self, QEvent* event);
	bool (*eventFilter)(VirtualQAbstractItemModel* self, QObject* watched, QEvent* event);
	void (*timerEvent)(VirtualQAbstractItemModel* self, QTimerEvent* event);
	void (*childEvent)(VirtualQAbstractItemModel* self, QChildEvent* event);
	void (*customEvent)(VirtualQAbstractItemModel* self, QEvent* event);
	void (*connectNotify)(VirtualQAbstractItemModel* self, QMetaMethod* signal);
	void (*disconnectNotify)(VirtualQAbstractItemModel* self, QMetaMethod* signal);
}QAbstractItemModel_VTable;

const QAbstractItemModel_VTable* QAbstractItemModel_vtbl(const VirtualQAbstractItemModel* self);
void* QAbstractItemModel_vdata(const VirtualQAbstractItemModel* self);
void QAbstractItemModel_setVdata(VirtualQAbstractItemModel* self, void* vdata);

VirtualQAbstractItemModel* QAbstractItemModel_new(const QAbstractItemModel_VTable* vtbl, void* vdata);
VirtualQAbstractItemModel* QAbstractItemModel_new2(const QAbstractItemModel_VTable* vtbl, void* vdata, QObject* parent);

void QAbstractItemModel_virtbase(QAbstractItemModel* src, QObject** outptr_QObject);
QMetaObject* QAbstractItemModel_metaObject(const QAbstractItemModel* self);
void* QAbstractItemModel_metacast(QAbstractItemModel* self, const char* param1);
int QAbstractItemModel_metacall(QAbstractItemModel* self, int param1, int param2, void** param3);
struct miqt_string QAbstractItemModel_tr(const char* s);
struct miqt_string QAbstractItemModel_trUtf8(const char* s);
bool QAbstractItemModel_hasIndex(const QAbstractItemModel* self, int row, int column);
QModelIndex* QAbstractItemModel_index(const QAbstractItemModel* self, int row, int column, QModelIndex* parent);
QModelIndex* QAbstractItemModel_parent(const QAbstractItemModel* self, QModelIndex* child);
QModelIndex* QAbstractItemModel_sibling(const QAbstractItemModel* self, int row, int column, QModelIndex* idx);
int QAbstractItemModel_rowCount(const QAbstractItemModel* self, QModelIndex* parent);
int QAbstractItemModel_columnCount(const QAbstractItemModel* self, QModelIndex* parent);
bool QAbstractItemModel_hasChildren(const QAbstractItemModel* self, QModelIndex* parent);
QVariant* QAbstractItemModel_data(const QAbstractItemModel* self, QModelIndex* index, int role);
bool QAbstractItemModel_setData(QAbstractItemModel* self, QModelIndex* index, QVariant* value, int role);
QVariant* QAbstractItemModel_headerData(const QAbstractItemModel* self, int section, int orientation, int role);
bool QAbstractItemModel_setHeaderData(QAbstractItemModel* self, int section, int orientation, QVariant* value, int role);
struct miqt_map /* of int to QVariant* */  QAbstractItemModel_itemData(const QAbstractItemModel* self, QModelIndex* index);
bool QAbstractItemModel_setItemData(QAbstractItemModel* self, QModelIndex* index, struct miqt_map /* of int to QVariant* */  roles);
struct miqt_array /* of struct miqt_string */  QAbstractItemModel_mimeTypes(const QAbstractItemModel* self);
QMimeData* QAbstractItemModel_mimeData(const QAbstractItemModel* self, struct miqt_array /* of QModelIndex* */  indexes);
bool QAbstractItemModel_canDropMimeData(const QAbstractItemModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
bool QAbstractItemModel_dropMimeData(QAbstractItemModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
int QAbstractItemModel_supportedDropActions(const QAbstractItemModel* self);
int QAbstractItemModel_supportedDragActions(const QAbstractItemModel* self);
bool QAbstractItemModel_insertRows(QAbstractItemModel* self, int row, int count, QModelIndex* parent);
bool QAbstractItemModel_insertColumns(QAbstractItemModel* self, int column, int count, QModelIndex* parent);
bool QAbstractItemModel_removeRows(QAbstractItemModel* self, int row, int count, QModelIndex* parent);
bool QAbstractItemModel_removeColumns(QAbstractItemModel* self, int column, int count, QModelIndex* parent);
bool QAbstractItemModel_moveRows(QAbstractItemModel* self, QModelIndex* sourceParent, int sourceRow, int count, QModelIndex* destinationParent, int destinationChild);
bool QAbstractItemModel_moveColumns(QAbstractItemModel* self, QModelIndex* sourceParent, int sourceColumn, int count, QModelIndex* destinationParent, int destinationChild);
bool QAbstractItemModel_insertRow(QAbstractItemModel* self, int row);
bool QAbstractItemModel_insertColumn(QAbstractItemModel* self, int column);
bool QAbstractItemModel_removeRow(QAbstractItemModel* self, int row);
bool QAbstractItemModel_removeColumn(QAbstractItemModel* self, int column);
bool QAbstractItemModel_moveRow(QAbstractItemModel* self, QModelIndex* sourceParent, int sourceRow, QModelIndex* destinationParent, int destinationChild);
bool QAbstractItemModel_moveColumn(QAbstractItemModel* self, QModelIndex* sourceParent, int sourceColumn, QModelIndex* destinationParent, int destinationChild);
void QAbstractItemModel_fetchMore(QAbstractItemModel* self, QModelIndex* parent);
bool QAbstractItemModel_canFetchMore(const QAbstractItemModel* self, QModelIndex* parent);
int QAbstractItemModel_flags(const QAbstractItemModel* self, QModelIndex* index);
void QAbstractItemModel_sort(QAbstractItemModel* self, int column, int order);
QModelIndex* QAbstractItemModel_buddy(const QAbstractItemModel* self, QModelIndex* index);
struct miqt_array /* of QModelIndex* */  QAbstractItemModel_match(const QAbstractItemModel* self, QModelIndex* start, int role, QVariant* value, int hits, int flags);
QSize* QAbstractItemModel_span(const QAbstractItemModel* self, QModelIndex* index);
struct miqt_map /* of int to struct miqt_string */  QAbstractItemModel_roleNames(const QAbstractItemModel* self);
bool QAbstractItemModel_checkIndex(const QAbstractItemModel* self, QModelIndex* index);
void QAbstractItemModel_dataChanged(QAbstractItemModel* self, QModelIndex* topLeft, QModelIndex* bottomRight);
void QAbstractItemModel_connect_dataChanged(VirtualQAbstractItemModel* self, intptr_t slot, void (*callback)(intptr_t, QModelIndex*, QModelIndex*), void (*release)(intptr_t));
void QAbstractItemModel_headerDataChanged(QAbstractItemModel* self, int orientation, int first, int last);
void QAbstractItemModel_connect_headerDataChanged(VirtualQAbstractItemModel* self, intptr_t slot, void (*callback)(intptr_t, int, int, int), void (*release)(intptr_t));
void QAbstractItemModel_layoutChanged(QAbstractItemModel* self);
void QAbstractItemModel_connect_layoutChanged(VirtualQAbstractItemModel* self, intptr_t slot, void (*callback)(intptr_t), void (*release)(intptr_t));
void QAbstractItemModel_layoutAboutToBeChanged(QAbstractItemModel* self);
void QAbstractItemModel_connect_layoutAboutToBeChanged(VirtualQAbstractItemModel* self, intptr_t slot, void (*callback)(intptr_t), void (*release)(intptr_t));
bool QAbstractItemModel_submit(QAbstractItemModel* self);
void QAbstractItemModel_revert(QAbstractItemModel* self);
struct miqt_string QAbstractItemModel_tr2(const char* s, const char* c);
struct miqt_string QAbstractItemModel_tr3(const char* s, const char* c, int n);
struct miqt_string QAbstractItemModel_trUtf82(const char* s, const char* c);
struct miqt_string QAbstractItemModel_trUtf83(const char* s, const char* c, int n);
bool QAbstractItemModel_hasIndex3(const QAbstractItemModel* self, int row, int column, QModelIndex* parent);
bool QAbstractItemModel_insertRow2(QAbstractItemModel* self, int row, QModelIndex* parent);
bool QAbstractItemModel_insertColumn2(QAbstractItemModel* self, int column, QModelIndex* parent);
bool QAbstractItemModel_removeRow2(QAbstractItemModel* self, int row, QModelIndex* parent);
bool QAbstractItemModel_removeColumn2(QAbstractItemModel* self, int column, QModelIndex* parent);
bool QAbstractItemModel_checkIndex2(const QAbstractItemModel* self, QModelIndex* index, int options);
void QAbstractItemModel_dataChanged3(QAbstractItemModel* self, QModelIndex* topLeft, QModelIndex* bottomRight, struct miqt_array /* of int */  roles);
void QAbstractItemModel_connect_dataChanged3(VirtualQAbstractItemModel* self, intptr_t slot, void (*callback)(intptr_t, QModelIndex*, QModelIndex*, struct miqt_array /* of int */ ), void (*release)(intptr_t));
void QAbstractItemModel_layoutChanged1(QAbstractItemModel* self, struct miqt_array /* of QPersistentModelIndex* */  parents);
void QAbstractItemModel_connect_layoutChanged1(VirtualQAbstractItemModel* self, intptr_t slot, void (*callback)(intptr_t, struct miqt_array /* of QPersistentModelIndex* */ ), void (*release)(intptr_t));
void QAbstractItemModel_layoutChanged2(QAbstractItemModel* self, struct miqt_array /* of QPersistentModelIndex* */  parents, int hint);
void QAbstractItemModel_connect_layoutChanged2(VirtualQAbstractItemModel* self, intptr_t slot, void (*callback)(intptr_t, struct miqt_array /* of QPersistentModelIndex* */ , int), void (*release)(intptr_t));
void QAbstractItemModel_layoutAboutToBeChanged1(QAbstractItemModel* self, struct miqt_array /* of QPersistentModelIndex* */  parents);
void QAbstractItemModel_connect_layoutAboutToBeChanged1(VirtualQAbstractItemModel* self, intptr_t slot, void (*callback)(intptr_t, struct miqt_array /* of QPersistentModelIndex* */ ), void (*release)(intptr_t));
void QAbstractItemModel_layoutAboutToBeChanged2(QAbstractItemModel* self, struct miqt_array /* of QPersistentModelIndex* */  parents, int hint);
void QAbstractItemModel_connect_layoutAboutToBeChanged2(VirtualQAbstractItemModel* self, intptr_t slot, void (*callback)(intptr_t, struct miqt_array /* of QPersistentModelIndex* */ , int), void (*release)(intptr_t));

QMetaObject* QAbstractItemModel_virtualbase_metaObject(const VirtualQAbstractItemModel* self);
void* QAbstractItemModel_virtualbase_metacast(VirtualQAbstractItemModel* self, const char* param1);
int QAbstractItemModel_virtualbase_metacall(VirtualQAbstractItemModel* self, int param1, int param2, void** param3);
QModelIndex* QAbstractItemModel_virtualbase_index(const VirtualQAbstractItemModel* self, int row, int column, QModelIndex* parent);
QModelIndex* QAbstractItemModel_virtualbase_parent(const VirtualQAbstractItemModel* self, QModelIndex* child);
QModelIndex* QAbstractItemModel_virtualbase_sibling(const VirtualQAbstractItemModel* self, int row, int column, QModelIndex* idx);
int QAbstractItemModel_virtualbase_rowCount(const VirtualQAbstractItemModel* self, QModelIndex* parent);
int QAbstractItemModel_virtualbase_columnCount(const VirtualQAbstractItemModel* self, QModelIndex* parent);
bool QAbstractItemModel_virtualbase_hasChildren(const VirtualQAbstractItemModel* self, QModelIndex* parent);
QVariant* QAbstractItemModel_virtualbase_data(const VirtualQAbstractItemModel* self, QModelIndex* index, int role);
bool QAbstractItemModel_virtualbase_setData(VirtualQAbstractItemModel* self, QModelIndex* index, QVariant* value, int role);
QVariant* QAbstractItemModel_virtualbase_headerData(const VirtualQAbstractItemModel* self, int section, int orientation, int role);
bool QAbstractItemModel_virtualbase_setHeaderData(VirtualQAbstractItemModel* self, int section, int orientation, QVariant* value, int role);
struct miqt_map /* of int to QVariant* */  QAbstractItemModel_virtualbase_itemData(const VirtualQAbstractItemModel* self, QModelIndex* index);
bool QAbstractItemModel_virtualbase_setItemData(VirtualQAbstractItemModel* self, QModelIndex* index, struct miqt_map /* of int to QVariant* */  roles);
struct miqt_array /* of struct miqt_string */  QAbstractItemModel_virtualbase_mimeTypes(const VirtualQAbstractItemModel* self);
QMimeData* QAbstractItemModel_virtualbase_mimeData(const VirtualQAbstractItemModel* self, struct miqt_array /* of QModelIndex* */  indexes);
bool QAbstractItemModel_virtualbase_canDropMimeData(const VirtualQAbstractItemModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
bool QAbstractItemModel_virtualbase_dropMimeData(VirtualQAbstractItemModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
int QAbstractItemModel_virtualbase_supportedDropActions(const VirtualQAbstractItemModel* self);
int QAbstractItemModel_virtualbase_supportedDragActions(const VirtualQAbstractItemModel* self);
bool QAbstractItemModel_virtualbase_insertRows(VirtualQAbstractItemModel* self, int row, int count, QModelIndex* parent);
bool QAbstractItemModel_virtualbase_insertColumns(VirtualQAbstractItemModel* self, int column, int count, QModelIndex* parent);
bool QAbstractItemModel_virtualbase_removeRows(VirtualQAbstractItemModel* self, int row, int count, QModelIndex* parent);
bool QAbstractItemModel_virtualbase_removeColumns(VirtualQAbstractItemModel* self, int column, int count, QModelIndex* parent);
bool QAbstractItemModel_virtualbase_moveRows(VirtualQAbstractItemModel* self, QModelIndex* sourceParent, int sourceRow, int count, QModelIndex* destinationParent, int destinationChild);
bool QAbstractItemModel_virtualbase_moveColumns(VirtualQAbstractItemModel* self, QModelIndex* sourceParent, int sourceColumn, int count, QModelIndex* destinationParent, int destinationChild);
void QAbstractItemModel_virtualbase_fetchMore(VirtualQAbstractItemModel* self, QModelIndex* parent);
bool QAbstractItemModel_virtualbase_canFetchMore(const VirtualQAbstractItemModel* self, QModelIndex* parent);
int QAbstractItemModel_virtualbase_flags(const VirtualQAbstractItemModel* self, QModelIndex* index);
void QAbstractItemModel_virtualbase_sort(VirtualQAbstractItemModel* self, int column, int order);
QModelIndex* QAbstractItemModel_virtualbase_buddy(const VirtualQAbstractItemModel* self, QModelIndex* index);
struct miqt_array /* of QModelIndex* */  QAbstractItemModel_virtualbase_match(const VirtualQAbstractItemModel* self, QModelIndex* start, int role, QVariant* value, int hits, int flags);
QSize* QAbstractItemModel_virtualbase_span(const VirtualQAbstractItemModel* self, QModelIndex* index);
struct miqt_map /* of int to struct miqt_string */  QAbstractItemModel_virtualbase_roleNames(const VirtualQAbstractItemModel* self);
bool QAbstractItemModel_virtualbase_submit(VirtualQAbstractItemModel* self);
void QAbstractItemModel_virtualbase_revert(VirtualQAbstractItemModel* self);
bool QAbstractItemModel_virtualbase_event(VirtualQAbstractItemModel* self, QEvent* event);
bool QAbstractItemModel_virtualbase_eventFilter(VirtualQAbstractItemModel* self, QObject* watched, QEvent* event);
void QAbstractItemModel_virtualbase_timerEvent(VirtualQAbstractItemModel* self, QTimerEvent* event);
void QAbstractItemModel_virtualbase_childEvent(VirtualQAbstractItemModel* self, QChildEvent* event);
void QAbstractItemModel_virtualbase_customEvent(VirtualQAbstractItemModel* self, QEvent* event);
void QAbstractItemModel_virtualbase_connectNotify(VirtualQAbstractItemModel* self, QMetaMethod* signal);
void QAbstractItemModel_virtualbase_disconnectNotify(VirtualQAbstractItemModel* self, QMetaMethod* signal);

void QAbstractItemModel_protectedbase_resetInternalData(VirtualQAbstractItemModel* self);
QModelIndex* QAbstractItemModel_protectedbase_createIndex(const VirtualQAbstractItemModel* self, int row, int column);
QModelIndex* QAbstractItemModel_protectedbase_createIndex2(const VirtualQAbstractItemModel* self, int row, int column, uintptr_t id);
void QAbstractItemModel_protectedbase_encodeData(const VirtualQAbstractItemModel* self, struct miqt_array /* of QModelIndex* */  indexes, QDataStream* stream);
bool QAbstractItemModel_protectedbase_decodeData(VirtualQAbstractItemModel* self, int row, int column, QModelIndex* parent, QDataStream* stream);
void QAbstractItemModel_protectedbase_beginInsertRows(VirtualQAbstractItemModel* self, QModelIndex* parent, int first, int last);
void QAbstractItemModel_protectedbase_endInsertRows(VirtualQAbstractItemModel* self);
void QAbstractItemModel_protectedbase_beginRemoveRows(VirtualQAbstractItemModel* self, QModelIndex* parent, int first, int last);
void QAbstractItemModel_protectedbase_endRemoveRows(VirtualQAbstractItemModel* self);
bool QAbstractItemModel_protectedbase_beginMoveRows(VirtualQAbstractItemModel* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationRow);
void QAbstractItemModel_protectedbase_endMoveRows(VirtualQAbstractItemModel* self);
void QAbstractItemModel_protectedbase_beginInsertColumns(VirtualQAbstractItemModel* self, QModelIndex* parent, int first, int last);
void QAbstractItemModel_protectedbase_endInsertColumns(VirtualQAbstractItemModel* self);
void QAbstractItemModel_protectedbase_beginRemoveColumns(VirtualQAbstractItemModel* self, QModelIndex* parent, int first, int last);
void QAbstractItemModel_protectedbase_endRemoveColumns(VirtualQAbstractItemModel* self);
bool QAbstractItemModel_protectedbase_beginMoveColumns(VirtualQAbstractItemModel* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationColumn);
void QAbstractItemModel_protectedbase_endMoveColumns(VirtualQAbstractItemModel* self);
void QAbstractItemModel_protectedbase_beginResetModel(VirtualQAbstractItemModel* self);
void QAbstractItemModel_protectedbase_endResetModel(VirtualQAbstractItemModel* self);
void QAbstractItemModel_protectedbase_changePersistentIndex(VirtualQAbstractItemModel* self, QModelIndex* from, QModelIndex* to);
void QAbstractItemModel_protectedbase_changePersistentIndexList(VirtualQAbstractItemModel* self, struct miqt_array /* of QModelIndex* */  from, struct miqt_array /* of QModelIndex* */  to);
struct miqt_array /* of QModelIndex* */  QAbstractItemModel_protectedbase_persistentIndexList(const VirtualQAbstractItemModel* self);
QModelIndex* QAbstractItemModel_protectedbase_createIndex3(const VirtualQAbstractItemModel* self, int row, int column, void* data);
QObject* QAbstractItemModel_protectedbase_sender(const VirtualQAbstractItemModel* self);
int QAbstractItemModel_protectedbase_senderSignalIndex(const VirtualQAbstractItemModel* self);
int QAbstractItemModel_protectedbase_receivers(const VirtualQAbstractItemModel* self, const char* signal);
bool QAbstractItemModel_protectedbase_isSignalConnected(const VirtualQAbstractItemModel* self, QMetaMethod* signal);

const QMetaObject* QAbstractItemModel_staticMetaObject();
void QAbstractItemModel_delete(QAbstractItemModel* self);

typedef struct VirtualQAbstractTableModel VirtualQAbstractTableModel;
typedef struct QAbstractTableModel_VTable{
	void (*destructor)(VirtualQAbstractTableModel* self);
	QMetaObject* (*metaObject)(const VirtualQAbstractTableModel* self);
	void* (*metacast)(VirtualQAbstractTableModel* self, const char* param1);
	int (*metacall)(VirtualQAbstractTableModel* self, int param1, int param2, void** param3);
	QModelIndex* (*index)(const VirtualQAbstractTableModel* self, int row, int column, QModelIndex* parent);
	QModelIndex* (*sibling)(const VirtualQAbstractTableModel* self, int row, int column, QModelIndex* idx);
	bool (*dropMimeData)(VirtualQAbstractTableModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
	int (*flags)(const VirtualQAbstractTableModel* self, QModelIndex* index);
	int (*rowCount)(const VirtualQAbstractTableModel* self, QModelIndex* parent);
	int (*columnCount)(const VirtualQAbstractTableModel* self, QModelIndex* parent);
	QVariant* (*data)(const VirtualQAbstractTableModel* self, QModelIndex* index, int role);
	bool (*setData)(VirtualQAbstractTableModel* self, QModelIndex* index, QVariant* value, int role);
	QVariant* (*headerData)(const VirtualQAbstractTableModel* self, int section, int orientation, int role);
	bool (*setHeaderData)(VirtualQAbstractTableModel* self, int section, int orientation, QVariant* value, int role);
	struct miqt_map /* of int to QVariant* */  (*itemData)(const VirtualQAbstractTableModel* self, QModelIndex* index);
	bool (*setItemData)(VirtualQAbstractTableModel* self, QModelIndex* index, struct miqt_map /* of int to QVariant* */  roles);
	struct miqt_array /* of struct miqt_string */  (*mimeTypes)(const VirtualQAbstractTableModel* self);
	QMimeData* (*mimeData)(const VirtualQAbstractTableModel* self, struct miqt_array /* of QModelIndex* */  indexes);
	bool (*canDropMimeData)(const VirtualQAbstractTableModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
	int (*supportedDropActions)(const VirtualQAbstractTableModel* self);
	int (*supportedDragActions)(const VirtualQAbstractTableModel* self);
	bool (*insertRows)(VirtualQAbstractTableModel* self, int row, int count, QModelIndex* parent);
	bool (*insertColumns)(VirtualQAbstractTableModel* self, int column, int count, QModelIndex* parent);
	bool (*removeRows)(VirtualQAbstractTableModel* self, int row, int count, QModelIndex* parent);
	bool (*removeColumns)(VirtualQAbstractTableModel* self, int column, int count, QModelIndex* parent);
	bool (*moveRows)(VirtualQAbstractTableModel* self, QModelIndex* sourceParent, int sourceRow, int count, QModelIndex* destinationParent, int destinationChild);
	bool (*moveColumns)(VirtualQAbstractTableModel* self, QModelIndex* sourceParent, int sourceColumn, int count, QModelIndex* destinationParent, int destinationChild);
	void (*fetchMore)(VirtualQAbstractTableModel* self, QModelIndex* parent);
	bool (*canFetchMore)(const VirtualQAbstractTableModel* self, QModelIndex* parent);
	void (*sort)(VirtualQAbstractTableModel* self, int column, int order);
	QModelIndex* (*buddy)(const VirtualQAbstractTableModel* self, QModelIndex* index);
	struct miqt_array /* of QModelIndex* */  (*match)(const VirtualQAbstractTableModel* self, QModelIndex* start, int role, QVariant* value, int hits, int flags);
	QSize* (*span)(const VirtualQAbstractTableModel* self, QModelIndex* index);
	struct miqt_map /* of int to struct miqt_string */  (*roleNames)(const VirtualQAbstractTableModel* self);
	bool (*submit)(VirtualQAbstractTableModel* self);
	void (*revert)(VirtualQAbstractTableModel* self);
	bool (*event)(VirtualQAbstractTableModel* self, QEvent* event);
	bool (*eventFilter)(VirtualQAbstractTableModel* self, QObject* watched, QEvent* event);
	void (*timerEvent)(VirtualQAbstractTableModel* self, QTimerEvent* event);
	void (*childEvent)(VirtualQAbstractTableModel* self, QChildEvent* event);
	void (*customEvent)(VirtualQAbstractTableModel* self, QEvent* event);
	void (*connectNotify)(VirtualQAbstractTableModel* self, QMetaMethod* signal);
	void (*disconnectNotify)(VirtualQAbstractTableModel* self, QMetaMethod* signal);
}QAbstractTableModel_VTable;

const QAbstractTableModel_VTable* QAbstractTableModel_vtbl(const VirtualQAbstractTableModel* self);
void* QAbstractTableModel_vdata(const VirtualQAbstractTableModel* self);
void QAbstractTableModel_setVdata(VirtualQAbstractTableModel* self, void* vdata);

VirtualQAbstractTableModel* QAbstractTableModel_new(const QAbstractTableModel_VTable* vtbl, void* vdata);
VirtualQAbstractTableModel* QAbstractTableModel_new2(const QAbstractTableModel_VTable* vtbl, void* vdata, QObject* parent);

void QAbstractTableModel_virtbase(QAbstractTableModel* src, QAbstractItemModel** outptr_QAbstractItemModel);
QMetaObject* QAbstractTableModel_metaObject(const QAbstractTableModel* self);
void* QAbstractTableModel_metacast(QAbstractTableModel* self, const char* param1);
int QAbstractTableModel_metacall(QAbstractTableModel* self, int param1, int param2, void** param3);
struct miqt_string QAbstractTableModel_tr(const char* s);
struct miqt_string QAbstractTableModel_trUtf8(const char* s);
QModelIndex* QAbstractTableModel_index(const QAbstractTableModel* self, int row, int column, QModelIndex* parent);
QModelIndex* QAbstractTableModel_sibling(const QAbstractTableModel* self, int row, int column, QModelIndex* idx);
bool QAbstractTableModel_dropMimeData(QAbstractTableModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
int QAbstractTableModel_flags(const QAbstractTableModel* self, QModelIndex* index);
struct miqt_string QAbstractTableModel_tr2(const char* s, const char* c);
struct miqt_string QAbstractTableModel_tr3(const char* s, const char* c, int n);
struct miqt_string QAbstractTableModel_trUtf82(const char* s, const char* c);
struct miqt_string QAbstractTableModel_trUtf83(const char* s, const char* c, int n);

QMetaObject* QAbstractTableModel_virtualbase_metaObject(const VirtualQAbstractTableModel* self);
void* QAbstractTableModel_virtualbase_metacast(VirtualQAbstractTableModel* self, const char* param1);
int QAbstractTableModel_virtualbase_metacall(VirtualQAbstractTableModel* self, int param1, int param2, void** param3);
QModelIndex* QAbstractTableModel_virtualbase_index(const VirtualQAbstractTableModel* self, int row, int column, QModelIndex* parent);
QModelIndex* QAbstractTableModel_virtualbase_sibling(const VirtualQAbstractTableModel* self, int row, int column, QModelIndex* idx);
bool QAbstractTableModel_virtualbase_dropMimeData(VirtualQAbstractTableModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
int QAbstractTableModel_virtualbase_flags(const VirtualQAbstractTableModel* self, QModelIndex* index);
int QAbstractTableModel_virtualbase_rowCount(const VirtualQAbstractTableModel* self, QModelIndex* parent);
int QAbstractTableModel_virtualbase_columnCount(const VirtualQAbstractTableModel* self, QModelIndex* parent);
QVariant* QAbstractTableModel_virtualbase_data(const VirtualQAbstractTableModel* self, QModelIndex* index, int role);
bool QAbstractTableModel_virtualbase_setData(VirtualQAbstractTableModel* self, QModelIndex* index, QVariant* value, int role);
QVariant* QAbstractTableModel_virtualbase_headerData(const VirtualQAbstractTableModel* self, int section, int orientation, int role);
bool QAbstractTableModel_virtualbase_setHeaderData(VirtualQAbstractTableModel* self, int section, int orientation, QVariant* value, int role);
struct miqt_map /* of int to QVariant* */  QAbstractTableModel_virtualbase_itemData(const VirtualQAbstractTableModel* self, QModelIndex* index);
bool QAbstractTableModel_virtualbase_setItemData(VirtualQAbstractTableModel* self, QModelIndex* index, struct miqt_map /* of int to QVariant* */  roles);
struct miqt_array /* of struct miqt_string */  QAbstractTableModel_virtualbase_mimeTypes(const VirtualQAbstractTableModel* self);
QMimeData* QAbstractTableModel_virtualbase_mimeData(const VirtualQAbstractTableModel* self, struct miqt_array /* of QModelIndex* */  indexes);
bool QAbstractTableModel_virtualbase_canDropMimeData(const VirtualQAbstractTableModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
int QAbstractTableModel_virtualbase_supportedDropActions(const VirtualQAbstractTableModel* self);
int QAbstractTableModel_virtualbase_supportedDragActions(const VirtualQAbstractTableModel* self);
bool QAbstractTableModel_virtualbase_insertRows(VirtualQAbstractTableModel* self, int row, int count, QModelIndex* parent);
bool QAbstractTableModel_virtualbase_insertColumns(VirtualQAbstractTableModel* self, int column, int count, QModelIndex* parent);
bool QAbstractTableModel_virtualbase_removeRows(VirtualQAbstractTableModel* self, int row, int count, QModelIndex* parent);
bool QAbstractTableModel_virtualbase_removeColumns(VirtualQAbstractTableModel* self, int column, int count, QModelIndex* parent);
bool QAbstractTableModel_virtualbase_moveRows(VirtualQAbstractTableModel* self, QModelIndex* sourceParent, int sourceRow, int count, QModelIndex* destinationParent, int destinationChild);
bool QAbstractTableModel_virtualbase_moveColumns(VirtualQAbstractTableModel* self, QModelIndex* sourceParent, int sourceColumn, int count, QModelIndex* destinationParent, int destinationChild);
void QAbstractTableModel_virtualbase_fetchMore(VirtualQAbstractTableModel* self, QModelIndex* parent);
bool QAbstractTableModel_virtualbase_canFetchMore(const VirtualQAbstractTableModel* self, QModelIndex* parent);
void QAbstractTableModel_virtualbase_sort(VirtualQAbstractTableModel* self, int column, int order);
QModelIndex* QAbstractTableModel_virtualbase_buddy(const VirtualQAbstractTableModel* self, QModelIndex* index);
struct miqt_array /* of QModelIndex* */  QAbstractTableModel_virtualbase_match(const VirtualQAbstractTableModel* self, QModelIndex* start, int role, QVariant* value, int hits, int flags);
QSize* QAbstractTableModel_virtualbase_span(const VirtualQAbstractTableModel* self, QModelIndex* index);
struct miqt_map /* of int to struct miqt_string */  QAbstractTableModel_virtualbase_roleNames(const VirtualQAbstractTableModel* self);
bool QAbstractTableModel_virtualbase_submit(VirtualQAbstractTableModel* self);
void QAbstractTableModel_virtualbase_revert(VirtualQAbstractTableModel* self);
bool QAbstractTableModel_virtualbase_event(VirtualQAbstractTableModel* self, QEvent* event);
bool QAbstractTableModel_virtualbase_eventFilter(VirtualQAbstractTableModel* self, QObject* watched, QEvent* event);
void QAbstractTableModel_virtualbase_timerEvent(VirtualQAbstractTableModel* self, QTimerEvent* event);
void QAbstractTableModel_virtualbase_childEvent(VirtualQAbstractTableModel* self, QChildEvent* event);
void QAbstractTableModel_virtualbase_customEvent(VirtualQAbstractTableModel* self, QEvent* event);
void QAbstractTableModel_virtualbase_connectNotify(VirtualQAbstractTableModel* self, QMetaMethod* signal);
void QAbstractTableModel_virtualbase_disconnectNotify(VirtualQAbstractTableModel* self, QMetaMethod* signal);

void QAbstractTableModel_protectedbase_resetInternalData(VirtualQAbstractTableModel* self);
QModelIndex* QAbstractTableModel_protectedbase_createIndex(const VirtualQAbstractTableModel* self, int row, int column);
void QAbstractTableModel_protectedbase_encodeData(const VirtualQAbstractTableModel* self, struct miqt_array /* of QModelIndex* */  indexes, QDataStream* stream);
bool QAbstractTableModel_protectedbase_decodeData(VirtualQAbstractTableModel* self, int row, int column, QModelIndex* parent, QDataStream* stream);
void QAbstractTableModel_protectedbase_beginInsertRows(VirtualQAbstractTableModel* self, QModelIndex* parent, int first, int last);
void QAbstractTableModel_protectedbase_endInsertRows(VirtualQAbstractTableModel* self);
void QAbstractTableModel_protectedbase_beginRemoveRows(VirtualQAbstractTableModel* self, QModelIndex* parent, int first, int last);
void QAbstractTableModel_protectedbase_endRemoveRows(VirtualQAbstractTableModel* self);
bool QAbstractTableModel_protectedbase_beginMoveRows(VirtualQAbstractTableModel* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationRow);
void QAbstractTableModel_protectedbase_endMoveRows(VirtualQAbstractTableModel* self);
void QAbstractTableModel_protectedbase_beginInsertColumns(VirtualQAbstractTableModel* self, QModelIndex* parent, int first, int last);
void QAbstractTableModel_protectedbase_endInsertColumns(VirtualQAbstractTableModel* self);
void QAbstractTableModel_protectedbase_beginRemoveColumns(VirtualQAbstractTableModel* self, QModelIndex* parent, int first, int last);
void QAbstractTableModel_protectedbase_endRemoveColumns(VirtualQAbstractTableModel* self);
bool QAbstractTableModel_protectedbase_beginMoveColumns(VirtualQAbstractTableModel* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationColumn);
void QAbstractTableModel_protectedbase_endMoveColumns(VirtualQAbstractTableModel* self);
void QAbstractTableModel_protectedbase_beginResetModel(VirtualQAbstractTableModel* self);
void QAbstractTableModel_protectedbase_endResetModel(VirtualQAbstractTableModel* self);
void QAbstractTableModel_protectedbase_changePersistentIndex(VirtualQAbstractTableModel* self, QModelIndex* from, QModelIndex* to);
void QAbstractTableModel_protectedbase_changePersistentIndexList(VirtualQAbstractTableModel* self, struct miqt_array /* of QModelIndex* */  from, struct miqt_array /* of QModelIndex* */  to);
struct miqt_array /* of QModelIndex* */  QAbstractTableModel_protectedbase_persistentIndexList(const VirtualQAbstractTableModel* self);
QObject* QAbstractTableModel_protectedbase_sender(const VirtualQAbstractTableModel* self);
int QAbstractTableModel_protectedbase_senderSignalIndex(const VirtualQAbstractTableModel* self);
int QAbstractTableModel_protectedbase_receivers(const VirtualQAbstractTableModel* self, const char* signal);
bool QAbstractTableModel_protectedbase_isSignalConnected(const VirtualQAbstractTableModel* self, QMetaMethod* signal);

const QMetaObject* QAbstractTableModel_staticMetaObject();
void QAbstractTableModel_delete(QAbstractTableModel* self);

typedef struct VirtualQAbstractListModel VirtualQAbstractListModel;
typedef struct QAbstractListModel_VTable{
	void (*destructor)(VirtualQAbstractListModel* self);
	QMetaObject* (*metaObject)(const VirtualQAbstractListModel* self);
	void* (*metacast)(VirtualQAbstractListModel* self, const char* param1);
	int (*metacall)(VirtualQAbstractListModel* self, int param1, int param2, void** param3);
	QModelIndex* (*index)(const VirtualQAbstractListModel* self, int row, int column, QModelIndex* parent);
	QModelIndex* (*sibling)(const VirtualQAbstractListModel* self, int row, int column, QModelIndex* idx);
	bool (*dropMimeData)(VirtualQAbstractListModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
	int (*flags)(const VirtualQAbstractListModel* self, QModelIndex* index);
	int (*rowCount)(const VirtualQAbstractListModel* self, QModelIndex* parent);
	QVariant* (*data)(const VirtualQAbstractListModel* self, QModelIndex* index, int role);
	bool (*setData)(VirtualQAbstractListModel* self, QModelIndex* index, QVariant* value, int role);
	QVariant* (*headerData)(const VirtualQAbstractListModel* self, int section, int orientation, int role);
	bool (*setHeaderData)(VirtualQAbstractListModel* self, int section, int orientation, QVariant* value, int role);
	struct miqt_map /* of int to QVariant* */  (*itemData)(const VirtualQAbstractListModel* self, QModelIndex* index);
	bool (*setItemData)(VirtualQAbstractListModel* self, QModelIndex* index, struct miqt_map /* of int to QVariant* */  roles);
	struct miqt_array /* of struct miqt_string */  (*mimeTypes)(const VirtualQAbstractListModel* self);
	QMimeData* (*mimeData)(const VirtualQAbstractListModel* self, struct miqt_array /* of QModelIndex* */  indexes);
	bool (*canDropMimeData)(const VirtualQAbstractListModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
	int (*supportedDropActions)(const VirtualQAbstractListModel* self);
	int (*supportedDragActions)(const VirtualQAbstractListModel* self);
	bool (*insertRows)(VirtualQAbstractListModel* self, int row, int count, QModelIndex* parent);
	bool (*insertColumns)(VirtualQAbstractListModel* self, int column, int count, QModelIndex* parent);
	bool (*removeRows)(VirtualQAbstractListModel* self, int row, int count, QModelIndex* parent);
	bool (*removeColumns)(VirtualQAbstractListModel* self, int column, int count, QModelIndex* parent);
	bool (*moveRows)(VirtualQAbstractListModel* self, QModelIndex* sourceParent, int sourceRow, int count, QModelIndex* destinationParent, int destinationChild);
	bool (*moveColumns)(VirtualQAbstractListModel* self, QModelIndex* sourceParent, int sourceColumn, int count, QModelIndex* destinationParent, int destinationChild);
	void (*fetchMore)(VirtualQAbstractListModel* self, QModelIndex* parent);
	bool (*canFetchMore)(const VirtualQAbstractListModel* self, QModelIndex* parent);
	void (*sort)(VirtualQAbstractListModel* self, int column, int order);
	QModelIndex* (*buddy)(const VirtualQAbstractListModel* self, QModelIndex* index);
	struct miqt_array /* of QModelIndex* */  (*match)(const VirtualQAbstractListModel* self, QModelIndex* start, int role, QVariant* value, int hits, int flags);
	QSize* (*span)(const VirtualQAbstractListModel* self, QModelIndex* index);
	struct miqt_map /* of int to struct miqt_string */  (*roleNames)(const VirtualQAbstractListModel* self);
	bool (*submit)(VirtualQAbstractListModel* self);
	void (*revert)(VirtualQAbstractListModel* self);
	bool (*event)(VirtualQAbstractListModel* self, QEvent* event);
	bool (*eventFilter)(VirtualQAbstractListModel* self, QObject* watched, QEvent* event);
	void (*timerEvent)(VirtualQAbstractListModel* self, QTimerEvent* event);
	void (*childEvent)(VirtualQAbstractListModel* self, QChildEvent* event);
	void (*customEvent)(VirtualQAbstractListModel* self, QEvent* event);
	void (*connectNotify)(VirtualQAbstractListModel* self, QMetaMethod* signal);
	void (*disconnectNotify)(VirtualQAbstractListModel* self, QMetaMethod* signal);
}QAbstractListModel_VTable;

const QAbstractListModel_VTable* QAbstractListModel_vtbl(const VirtualQAbstractListModel* self);
void* QAbstractListModel_vdata(const VirtualQAbstractListModel* self);
void QAbstractListModel_setVdata(VirtualQAbstractListModel* self, void* vdata);

VirtualQAbstractListModel* QAbstractListModel_new(const QAbstractListModel_VTable* vtbl, void* vdata);
VirtualQAbstractListModel* QAbstractListModel_new2(const QAbstractListModel_VTable* vtbl, void* vdata, QObject* parent);

void QAbstractListModel_virtbase(QAbstractListModel* src, QAbstractItemModel** outptr_QAbstractItemModel);
QMetaObject* QAbstractListModel_metaObject(const QAbstractListModel* self);
void* QAbstractListModel_metacast(QAbstractListModel* self, const char* param1);
int QAbstractListModel_metacall(QAbstractListModel* self, int param1, int param2, void** param3);
struct miqt_string QAbstractListModel_tr(const char* s);
struct miqt_string QAbstractListModel_trUtf8(const char* s);
QModelIndex* QAbstractListModel_index(const QAbstractListModel* self, int row, int column, QModelIndex* parent);
QModelIndex* QAbstractListModel_sibling(const QAbstractListModel* self, int row, int column, QModelIndex* idx);
bool QAbstractListModel_dropMimeData(QAbstractListModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
int QAbstractListModel_flags(const QAbstractListModel* self, QModelIndex* index);
struct miqt_string QAbstractListModel_tr2(const char* s, const char* c);
struct miqt_string QAbstractListModel_tr3(const char* s, const char* c, int n);
struct miqt_string QAbstractListModel_trUtf82(const char* s, const char* c);
struct miqt_string QAbstractListModel_trUtf83(const char* s, const char* c, int n);

QMetaObject* QAbstractListModel_virtualbase_metaObject(const VirtualQAbstractListModel* self);
void* QAbstractListModel_virtualbase_metacast(VirtualQAbstractListModel* self, const char* param1);
int QAbstractListModel_virtualbase_metacall(VirtualQAbstractListModel* self, int param1, int param2, void** param3);
QModelIndex* QAbstractListModel_virtualbase_index(const VirtualQAbstractListModel* self, int row, int column, QModelIndex* parent);
QModelIndex* QAbstractListModel_virtualbase_sibling(const VirtualQAbstractListModel* self, int row, int column, QModelIndex* idx);
bool QAbstractListModel_virtualbase_dropMimeData(VirtualQAbstractListModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
int QAbstractListModel_virtualbase_flags(const VirtualQAbstractListModel* self, QModelIndex* index);
int QAbstractListModel_virtualbase_rowCount(const VirtualQAbstractListModel* self, QModelIndex* parent);
QVariant* QAbstractListModel_virtualbase_data(const VirtualQAbstractListModel* self, QModelIndex* index, int role);
bool QAbstractListModel_virtualbase_setData(VirtualQAbstractListModel* self, QModelIndex* index, QVariant* value, int role);
QVariant* QAbstractListModel_virtualbase_headerData(const VirtualQAbstractListModel* self, int section, int orientation, int role);
bool QAbstractListModel_virtualbase_setHeaderData(VirtualQAbstractListModel* self, int section, int orientation, QVariant* value, int role);
struct miqt_map /* of int to QVariant* */  QAbstractListModel_virtualbase_itemData(const VirtualQAbstractListModel* self, QModelIndex* index);
bool QAbstractListModel_virtualbase_setItemData(VirtualQAbstractListModel* self, QModelIndex* index, struct miqt_map /* of int to QVariant* */  roles);
struct miqt_array /* of struct miqt_string */  QAbstractListModel_virtualbase_mimeTypes(const VirtualQAbstractListModel* self);
QMimeData* QAbstractListModel_virtualbase_mimeData(const VirtualQAbstractListModel* self, struct miqt_array /* of QModelIndex* */  indexes);
bool QAbstractListModel_virtualbase_canDropMimeData(const VirtualQAbstractListModel* self, QMimeData* data, int action, int row, int column, QModelIndex* parent);
int QAbstractListModel_virtualbase_supportedDropActions(const VirtualQAbstractListModel* self);
int QAbstractListModel_virtualbase_supportedDragActions(const VirtualQAbstractListModel* self);
bool QAbstractListModel_virtualbase_insertRows(VirtualQAbstractListModel* self, int row, int count, QModelIndex* parent);
bool QAbstractListModel_virtualbase_insertColumns(VirtualQAbstractListModel* self, int column, int count, QModelIndex* parent);
bool QAbstractListModel_virtualbase_removeRows(VirtualQAbstractListModel* self, int row, int count, QModelIndex* parent);
bool QAbstractListModel_virtualbase_removeColumns(VirtualQAbstractListModel* self, int column, int count, QModelIndex* parent);
bool QAbstractListModel_virtualbase_moveRows(VirtualQAbstractListModel* self, QModelIndex* sourceParent, int sourceRow, int count, QModelIndex* destinationParent, int destinationChild);
bool QAbstractListModel_virtualbase_moveColumns(VirtualQAbstractListModel* self, QModelIndex* sourceParent, int sourceColumn, int count, QModelIndex* destinationParent, int destinationChild);
void QAbstractListModel_virtualbase_fetchMore(VirtualQAbstractListModel* self, QModelIndex* parent);
bool QAbstractListModel_virtualbase_canFetchMore(const VirtualQAbstractListModel* self, QModelIndex* parent);
void QAbstractListModel_virtualbase_sort(VirtualQAbstractListModel* self, int column, int order);
QModelIndex* QAbstractListModel_virtualbase_buddy(const VirtualQAbstractListModel* self, QModelIndex* index);
struct miqt_array /* of QModelIndex* */  QAbstractListModel_virtualbase_match(const VirtualQAbstractListModel* self, QModelIndex* start, int role, QVariant* value, int hits, int flags);
QSize* QAbstractListModel_virtualbase_span(const VirtualQAbstractListModel* self, QModelIndex* index);
struct miqt_map /* of int to struct miqt_string */  QAbstractListModel_virtualbase_roleNames(const VirtualQAbstractListModel* self);
bool QAbstractListModel_virtualbase_submit(VirtualQAbstractListModel* self);
void QAbstractListModel_virtualbase_revert(VirtualQAbstractListModel* self);
bool QAbstractListModel_virtualbase_event(VirtualQAbstractListModel* self, QEvent* event);
bool QAbstractListModel_virtualbase_eventFilter(VirtualQAbstractListModel* self, QObject* watched, QEvent* event);
void QAbstractListModel_virtualbase_timerEvent(VirtualQAbstractListModel* self, QTimerEvent* event);
void QAbstractListModel_virtualbase_childEvent(VirtualQAbstractListModel* self, QChildEvent* event);
void QAbstractListModel_virtualbase_customEvent(VirtualQAbstractListModel* self, QEvent* event);
void QAbstractListModel_virtualbase_connectNotify(VirtualQAbstractListModel* self, QMetaMethod* signal);
void QAbstractListModel_virtualbase_disconnectNotify(VirtualQAbstractListModel* self, QMetaMethod* signal);

void QAbstractListModel_protectedbase_resetInternalData(VirtualQAbstractListModel* self);
QModelIndex* QAbstractListModel_protectedbase_createIndex(const VirtualQAbstractListModel* self, int row, int column);
void QAbstractListModel_protectedbase_encodeData(const VirtualQAbstractListModel* self, struct miqt_array /* of QModelIndex* */  indexes, QDataStream* stream);
bool QAbstractListModel_protectedbase_decodeData(VirtualQAbstractListModel* self, int row, int column, QModelIndex* parent, QDataStream* stream);
void QAbstractListModel_protectedbase_beginInsertRows(VirtualQAbstractListModel* self, QModelIndex* parent, int first, int last);
void QAbstractListModel_protectedbase_endInsertRows(VirtualQAbstractListModel* self);
void QAbstractListModel_protectedbase_beginRemoveRows(VirtualQAbstractListModel* self, QModelIndex* parent, int first, int last);
void QAbstractListModel_protectedbase_endRemoveRows(VirtualQAbstractListModel* self);
bool QAbstractListModel_protectedbase_beginMoveRows(VirtualQAbstractListModel* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationRow);
void QAbstractListModel_protectedbase_endMoveRows(VirtualQAbstractListModel* self);
void QAbstractListModel_protectedbase_beginInsertColumns(VirtualQAbstractListModel* self, QModelIndex* parent, int first, int last);
void QAbstractListModel_protectedbase_endInsertColumns(VirtualQAbstractListModel* self);
void QAbstractListModel_protectedbase_beginRemoveColumns(VirtualQAbstractListModel* self, QModelIndex* parent, int first, int last);
void QAbstractListModel_protectedbase_endRemoveColumns(VirtualQAbstractListModel* self);
bool QAbstractListModel_protectedbase_beginMoveColumns(VirtualQAbstractListModel* self, QModelIndex* sourceParent, int sourceFirst, int sourceLast, QModelIndex* destinationParent, int destinationColumn);
void QAbstractListModel_protectedbase_endMoveColumns(VirtualQAbstractListModel* self);
void QAbstractListModel_protectedbase_beginResetModel(VirtualQAbstractListModel* self);
void QAbstractListModel_protectedbase_endResetModel(VirtualQAbstractListModel* self);
void QAbstractListModel_protectedbase_changePersistentIndex(VirtualQAbstractListModel* self, QModelIndex* from, QModelIndex* to);
void QAbstractListModel_protectedbase_changePersistentIndexList(VirtualQAbstractListModel* self, struct miqt_array /* of QModelIndex* */  from, struct miqt_array /* of QModelIndex* */  to);
struct miqt_array /* of QModelIndex* */  QAbstractListModel_protectedbase_persistentIndexList(const VirtualQAbstractListModel* self);
QObject* QAbstractListModel_protectedbase_sender(const VirtualQAbstractListModel* self);
int QAbstractListModel_protectedbase_senderSignalIndex(const VirtualQAbstractListModel* self);
int QAbstractListModel_protectedbase_receivers(const VirtualQAbstractListModel* self, const char* signal);
bool QAbstractListModel_protectedbase_isSignalConnected(const VirtualQAbstractListModel* self, QMetaMethod* signal);

const QMetaObject* QAbstractListModel_staticMetaObject();
void QAbstractListModel_delete(QAbstractListModel* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
