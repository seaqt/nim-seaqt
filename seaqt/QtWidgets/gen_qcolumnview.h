#pragma once
#ifndef SEAQT_QTWIDGETS_GEN_QCOLUMNVIEW_H
#define SEAQT_QTWIDGETS_GEN_QCOLUMNVIEW_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../libseaqt/libseaqt.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
class QAbstractItemModel;
class QAbstractItemView;
class QAbstractScrollArea;
class QActionEvent;
class QChildEvent;
class QCloseEvent;
class QColumnView;
class QContextMenuEvent;
class QDragEnterEvent;
class QDragLeaveEvent;
class QDragMoveEvent;
class QDropEvent;
class QEvent;
class QFocusEvent;
class QFrame;
class QHideEvent;
class QInputMethodEvent;
class QItemSelection;
class QItemSelectionModel;
class QKeyEvent;
class QMargins;
class QMetaMethod;
class QMetaObject;
class QModelIndex;
class QMouseEvent;
class QMoveEvent;
class QObject;
class QPaintDevice;
class QPaintEngine;
class QPaintEvent;
class QPainter;
class QPoint;
class QRect;
class QRegion;
class QResizeEvent;
class QShowEvent;
class QSize;
class QStyleOptionFrame;
class QStyleOptionViewItem;
class QTabletEvent;
class QTimerEvent;
class QVariant;
class QWheelEvent;
class QWidget;
#else
typedef struct QAbstractItemModel QAbstractItemModel;
typedef struct QAbstractItemView QAbstractItemView;
typedef struct QAbstractScrollArea QAbstractScrollArea;
typedef struct QActionEvent QActionEvent;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QColumnView QColumnView;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QFrame QFrame;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QItemSelection QItemSelection;
typedef struct QItemSelectionModel QItemSelectionModel;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMargins QMargins;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QModelIndex QModelIndex;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QRect QRect;
typedef struct QRegion QRegion;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QStyleOptionFrame QStyleOptionFrame;
typedef struct QStyleOptionViewItem QStyleOptionViewItem;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

typedef struct VirtualQColumnView VirtualQColumnView;
typedef struct QColumnView_VTable{
	void (*destructor)(VirtualQColumnView* self);
	QMetaObject* (*metaObject)(const VirtualQColumnView* self);
	void* (*metacast)(VirtualQColumnView* self, const char* param1);
	int (*metacall)(VirtualQColumnView* self, int param1, int param2, void** param3);
	QModelIndex* (*indexAt)(const VirtualQColumnView* self, QPoint* point);
	void (*scrollTo)(VirtualQColumnView* self, QModelIndex* index, int hint);
	QSize* (*sizeHint)(const VirtualQColumnView* self);
	QRect* (*visualRect)(const VirtualQColumnView* self, QModelIndex* index);
	void (*setModel)(VirtualQColumnView* self, QAbstractItemModel* model);
	void (*setSelectionModel)(VirtualQColumnView* self, QItemSelectionModel* selectionModel);
	void (*setRootIndex)(VirtualQColumnView* self, QModelIndex* index);
	void (*selectAll)(VirtualQColumnView* self);
	bool (*isIndexHidden)(const VirtualQColumnView* self, QModelIndex* index);
	QModelIndex* (*moveCursor)(VirtualQColumnView* self, int cursorAction, int modifiers);
	void (*resizeEvent)(VirtualQColumnView* self, QResizeEvent* event);
	void (*setSelection)(VirtualQColumnView* self, QRect* rect, int command);
	QRegion* (*visualRegionForSelection)(const VirtualQColumnView* self, QItemSelection* selection);
	int (*horizontalOffset)(const VirtualQColumnView* self);
	int (*verticalOffset)(const VirtualQColumnView* self);
	void (*rowsInserted)(VirtualQColumnView* self, QModelIndex* parent, int start, int end);
	void (*currentChanged)(VirtualQColumnView* self, QModelIndex* current, QModelIndex* previous);
	void (*scrollContentsBy)(VirtualQColumnView* self, int dx, int dy);
	QAbstractItemView* (*createColumn)(VirtualQColumnView* self, QModelIndex* rootIndex);
	void (*keyboardSearch)(VirtualQColumnView* self, struct miqt_string search);
	int (*sizeHintForRow)(const VirtualQColumnView* self, int row);
	int (*sizeHintForColumn)(const VirtualQColumnView* self, int column);
	QVariant* (*inputMethodQuery)(const VirtualQColumnView* self, int query);
	void (*reset)(VirtualQColumnView* self);
	void (*doItemsLayout)(VirtualQColumnView* self);
	void (*dataChanged)(VirtualQColumnView* self, QModelIndex* topLeft, QModelIndex* bottomRight, struct miqt_array /* of int */  roles);
	void (*rowsAboutToBeRemoved)(VirtualQColumnView* self, QModelIndex* parent, int start, int end);
	void (*selectionChanged)(VirtualQColumnView* self, QItemSelection* selected, QItemSelection* deselected);
	void (*updateEditorData)(VirtualQColumnView* self);
	void (*updateEditorGeometries)(VirtualQColumnView* self);
	void (*updateGeometries)(VirtualQColumnView* self);
	void (*verticalScrollbarAction)(VirtualQColumnView* self, int action);
	void (*horizontalScrollbarAction)(VirtualQColumnView* self, int action);
	void (*verticalScrollbarValueChanged)(VirtualQColumnView* self, int value);
	void (*horizontalScrollbarValueChanged)(VirtualQColumnView* self, int value);
	void (*closeEditor)(VirtualQColumnView* self, QWidget* editor, int hint);
	void (*commitData)(VirtualQColumnView* self, QWidget* editor);
	void (*editorDestroyed)(VirtualQColumnView* self, QObject* editor);
	struct miqt_array /* of QModelIndex* */  (*selectedIndexes)(const VirtualQColumnView* self);
	bool (*edit2)(VirtualQColumnView* self, QModelIndex* index, int trigger, QEvent* event);
	int (*selectionCommand)(const VirtualQColumnView* self, QModelIndex* index, QEvent* event);
	void (*startDrag)(VirtualQColumnView* self, int supportedActions);
	QStyleOptionViewItem* (*viewOptions)(const VirtualQColumnView* self);
	bool (*focusNextPrevChild)(VirtualQColumnView* self, bool next);
	bool (*event)(VirtualQColumnView* self, QEvent* event);
	bool (*viewportEvent)(VirtualQColumnView* self, QEvent* event);
	void (*mousePressEvent)(VirtualQColumnView* self, QMouseEvent* event);
	void (*mouseMoveEvent)(VirtualQColumnView* self, QMouseEvent* event);
	void (*mouseReleaseEvent)(VirtualQColumnView* self, QMouseEvent* event);
	void (*mouseDoubleClickEvent)(VirtualQColumnView* self, QMouseEvent* event);
	void (*dragEnterEvent)(VirtualQColumnView* self, QDragEnterEvent* event);
	void (*dragMoveEvent)(VirtualQColumnView* self, QDragMoveEvent* event);
	void (*dragLeaveEvent)(VirtualQColumnView* self, QDragLeaveEvent* event);
	void (*dropEvent)(VirtualQColumnView* self, QDropEvent* event);
	void (*focusInEvent)(VirtualQColumnView* self, QFocusEvent* event);
	void (*focusOutEvent)(VirtualQColumnView* self, QFocusEvent* event);
	void (*keyPressEvent)(VirtualQColumnView* self, QKeyEvent* event);
	void (*timerEvent)(VirtualQColumnView* self, QTimerEvent* event);
	void (*inputMethodEvent)(VirtualQColumnView* self, QInputMethodEvent* event);
	bool (*eventFilter)(VirtualQColumnView* self, QObject* object, QEvent* event);
	QSize* (*viewportSizeHint)(const VirtualQColumnView* self);
	QSize* (*minimumSizeHint)(const VirtualQColumnView* self);
	void (*setupViewport)(VirtualQColumnView* self, QWidget* viewport);
	void (*paintEvent)(VirtualQColumnView* self, QPaintEvent* param1);
	void (*wheelEvent)(VirtualQColumnView* self, QWheelEvent* param1);
	void (*contextMenuEvent)(VirtualQColumnView* self, QContextMenuEvent* param1);
	void (*changeEvent)(VirtualQColumnView* self, QEvent* param1);
	int (*devType)(const VirtualQColumnView* self);
	void (*setVisible)(VirtualQColumnView* self, bool visible);
	int (*heightForWidth)(const VirtualQColumnView* self, int param1);
	bool (*hasHeightForWidth)(const VirtualQColumnView* self);
	QPaintEngine* (*paintEngine)(const VirtualQColumnView* self);
	void (*keyReleaseEvent)(VirtualQColumnView* self, QKeyEvent* event);
	void (*enterEvent)(VirtualQColumnView* self, QEvent* event);
	void (*leaveEvent)(VirtualQColumnView* self, QEvent* event);
	void (*moveEvent)(VirtualQColumnView* self, QMoveEvent* event);
	void (*closeEvent)(VirtualQColumnView* self, QCloseEvent* event);
	void (*tabletEvent)(VirtualQColumnView* self, QTabletEvent* event);
	void (*actionEvent)(VirtualQColumnView* self, QActionEvent* event);
	void (*showEvent)(VirtualQColumnView* self, QShowEvent* event);
	void (*hideEvent)(VirtualQColumnView* self, QHideEvent* event);
	bool (*nativeEvent)(VirtualQColumnView* self, struct miqt_string eventType, void* message, long* result);
	int (*metric)(const VirtualQColumnView* self, int param1);
	void (*initPainter)(const VirtualQColumnView* self, QPainter* painter);
	QPaintDevice* (*redirected)(const VirtualQColumnView* self, QPoint* offset);
	QPainter* (*sharedPainter)(const VirtualQColumnView* self);
	void (*childEvent)(VirtualQColumnView* self, QChildEvent* event);
	void (*customEvent)(VirtualQColumnView* self, QEvent* event);
	void (*connectNotify)(VirtualQColumnView* self, QMetaMethod* signal);
	void (*disconnectNotify)(VirtualQColumnView* self, QMetaMethod* signal);
}QColumnView_VTable;

const QColumnView_VTable* QColumnView_vtbl(const VirtualQColumnView* self);
void* QColumnView_vdata(const VirtualQColumnView* self);
void QColumnView_setVdata(VirtualQColumnView* self, void* vdata);

VirtualQColumnView* QColumnView_new(const QColumnView_VTable* vtbl, void* vdata, QWidget* parent);
VirtualQColumnView* QColumnView_new2(const QColumnView_VTable* vtbl, void* vdata);

void QColumnView_virtbase(QColumnView* src, QAbstractItemView** outptr_QAbstractItemView);
QMetaObject* QColumnView_metaObject(const QColumnView* self);
void* QColumnView_metacast(QColumnView* self, const char* param1);
int QColumnView_metacall(QColumnView* self, int param1, int param2, void** param3);
struct miqt_string QColumnView_tr(const char* s);
struct miqt_string QColumnView_trUtf8(const char* s);
void QColumnView_updatePreviewWidget(QColumnView* self, QModelIndex* index);
void QColumnView_connect_updatePreviewWidget(VirtualQColumnView* self, intptr_t slot, void (*callback)(intptr_t, QModelIndex*), void (*release)(intptr_t));
QModelIndex* QColumnView_indexAt(const QColumnView* self, QPoint* point);
void QColumnView_scrollTo(QColumnView* self, QModelIndex* index, int hint);
QSize* QColumnView_sizeHint(const QColumnView* self);
QRect* QColumnView_visualRect(const QColumnView* self, QModelIndex* index);
void QColumnView_setModel(QColumnView* self, QAbstractItemModel* model);
void QColumnView_setSelectionModel(QColumnView* self, QItemSelectionModel* selectionModel);
void QColumnView_setRootIndex(QColumnView* self, QModelIndex* index);
void QColumnView_selectAll(QColumnView* self);
void QColumnView_setResizeGripsVisible(QColumnView* self, bool visible);
bool QColumnView_resizeGripsVisible(const QColumnView* self);
QWidget* QColumnView_previewWidget(const QColumnView* self);
void QColumnView_setPreviewWidget(QColumnView* self, QWidget* widget);
void QColumnView_setColumnWidths(QColumnView* self, struct miqt_array /* of int */  list);
struct miqt_array /* of int */  QColumnView_columnWidths(const QColumnView* self);
bool QColumnView_isIndexHidden(const QColumnView* self, QModelIndex* index);
QModelIndex* QColumnView_moveCursor(QColumnView* self, int cursorAction, int modifiers);
void QColumnView_resizeEvent(QColumnView* self, QResizeEvent* event);
void QColumnView_setSelection(QColumnView* self, QRect* rect, int command);
QRegion* QColumnView_visualRegionForSelection(const QColumnView* self, QItemSelection* selection);
int QColumnView_horizontalOffset(const QColumnView* self);
int QColumnView_verticalOffset(const QColumnView* self);
void QColumnView_rowsInserted(QColumnView* self, QModelIndex* parent, int start, int end);
void QColumnView_currentChanged(QColumnView* self, QModelIndex* current, QModelIndex* previous);
void QColumnView_scrollContentsBy(QColumnView* self, int dx, int dy);
QAbstractItemView* QColumnView_createColumn(QColumnView* self, QModelIndex* rootIndex);
struct miqt_string QColumnView_tr2(const char* s, const char* c);
struct miqt_string QColumnView_tr3(const char* s, const char* c, int n);
struct miqt_string QColumnView_trUtf82(const char* s, const char* c);
struct miqt_string QColumnView_trUtf83(const char* s, const char* c, int n);

QMetaObject* QColumnView_virtualbase_metaObject(const VirtualQColumnView* self);
void* QColumnView_virtualbase_metacast(VirtualQColumnView* self, const char* param1);
int QColumnView_virtualbase_metacall(VirtualQColumnView* self, int param1, int param2, void** param3);
QModelIndex* QColumnView_virtualbase_indexAt(const VirtualQColumnView* self, QPoint* point);
void QColumnView_virtualbase_scrollTo(VirtualQColumnView* self, QModelIndex* index, int hint);
QSize* QColumnView_virtualbase_sizeHint(const VirtualQColumnView* self);
QRect* QColumnView_virtualbase_visualRect(const VirtualQColumnView* self, QModelIndex* index);
void QColumnView_virtualbase_setModel(VirtualQColumnView* self, QAbstractItemModel* model);
void QColumnView_virtualbase_setSelectionModel(VirtualQColumnView* self, QItemSelectionModel* selectionModel);
void QColumnView_virtualbase_setRootIndex(VirtualQColumnView* self, QModelIndex* index);
void QColumnView_virtualbase_selectAll(VirtualQColumnView* self);
bool QColumnView_virtualbase_isIndexHidden(const VirtualQColumnView* self, QModelIndex* index);
QModelIndex* QColumnView_virtualbase_moveCursor(VirtualQColumnView* self, int cursorAction, int modifiers);
void QColumnView_virtualbase_resizeEvent(VirtualQColumnView* self, QResizeEvent* event);
void QColumnView_virtualbase_setSelection(VirtualQColumnView* self, QRect* rect, int command);
QRegion* QColumnView_virtualbase_visualRegionForSelection(const VirtualQColumnView* self, QItemSelection* selection);
int QColumnView_virtualbase_horizontalOffset(const VirtualQColumnView* self);
int QColumnView_virtualbase_verticalOffset(const VirtualQColumnView* self);
void QColumnView_virtualbase_rowsInserted(VirtualQColumnView* self, QModelIndex* parent, int start, int end);
void QColumnView_virtualbase_currentChanged(VirtualQColumnView* self, QModelIndex* current, QModelIndex* previous);
void QColumnView_virtualbase_scrollContentsBy(VirtualQColumnView* self, int dx, int dy);
QAbstractItemView* QColumnView_virtualbase_createColumn(VirtualQColumnView* self, QModelIndex* rootIndex);
void QColumnView_virtualbase_keyboardSearch(VirtualQColumnView* self, struct miqt_string search);
int QColumnView_virtualbase_sizeHintForRow(const VirtualQColumnView* self, int row);
int QColumnView_virtualbase_sizeHintForColumn(const VirtualQColumnView* self, int column);
QVariant* QColumnView_virtualbase_inputMethodQuery(const VirtualQColumnView* self, int query);
void QColumnView_virtualbase_reset(VirtualQColumnView* self);
void QColumnView_virtualbase_doItemsLayout(VirtualQColumnView* self);
void QColumnView_virtualbase_dataChanged(VirtualQColumnView* self, QModelIndex* topLeft, QModelIndex* bottomRight, struct miqt_array /* of int */  roles);
void QColumnView_virtualbase_rowsAboutToBeRemoved(VirtualQColumnView* self, QModelIndex* parent, int start, int end);
void QColumnView_virtualbase_selectionChanged(VirtualQColumnView* self, QItemSelection* selected, QItemSelection* deselected);
void QColumnView_virtualbase_updateEditorData(VirtualQColumnView* self);
void QColumnView_virtualbase_updateEditorGeometries(VirtualQColumnView* self);
void QColumnView_virtualbase_updateGeometries(VirtualQColumnView* self);
void QColumnView_virtualbase_verticalScrollbarAction(VirtualQColumnView* self, int action);
void QColumnView_virtualbase_horizontalScrollbarAction(VirtualQColumnView* self, int action);
void QColumnView_virtualbase_verticalScrollbarValueChanged(VirtualQColumnView* self, int value);
void QColumnView_virtualbase_horizontalScrollbarValueChanged(VirtualQColumnView* self, int value);
void QColumnView_virtualbase_closeEditor(VirtualQColumnView* self, QWidget* editor, int hint);
void QColumnView_virtualbase_commitData(VirtualQColumnView* self, QWidget* editor);
void QColumnView_virtualbase_editorDestroyed(VirtualQColumnView* self, QObject* editor);
struct miqt_array /* of QModelIndex* */  QColumnView_virtualbase_selectedIndexes(const VirtualQColumnView* self);
bool QColumnView_virtualbase_edit2(VirtualQColumnView* self, QModelIndex* index, int trigger, QEvent* event);
int QColumnView_virtualbase_selectionCommand(const VirtualQColumnView* self, QModelIndex* index, QEvent* event);
void QColumnView_virtualbase_startDrag(VirtualQColumnView* self, int supportedActions);
QStyleOptionViewItem* QColumnView_virtualbase_viewOptions(const VirtualQColumnView* self);
bool QColumnView_virtualbase_focusNextPrevChild(VirtualQColumnView* self, bool next);
bool QColumnView_virtualbase_event(VirtualQColumnView* self, QEvent* event);
bool QColumnView_virtualbase_viewportEvent(VirtualQColumnView* self, QEvent* event);
void QColumnView_virtualbase_mousePressEvent(VirtualQColumnView* self, QMouseEvent* event);
void QColumnView_virtualbase_mouseMoveEvent(VirtualQColumnView* self, QMouseEvent* event);
void QColumnView_virtualbase_mouseReleaseEvent(VirtualQColumnView* self, QMouseEvent* event);
void QColumnView_virtualbase_mouseDoubleClickEvent(VirtualQColumnView* self, QMouseEvent* event);
void QColumnView_virtualbase_dragEnterEvent(VirtualQColumnView* self, QDragEnterEvent* event);
void QColumnView_virtualbase_dragMoveEvent(VirtualQColumnView* self, QDragMoveEvent* event);
void QColumnView_virtualbase_dragLeaveEvent(VirtualQColumnView* self, QDragLeaveEvent* event);
void QColumnView_virtualbase_dropEvent(VirtualQColumnView* self, QDropEvent* event);
void QColumnView_virtualbase_focusInEvent(VirtualQColumnView* self, QFocusEvent* event);
void QColumnView_virtualbase_focusOutEvent(VirtualQColumnView* self, QFocusEvent* event);
void QColumnView_virtualbase_keyPressEvent(VirtualQColumnView* self, QKeyEvent* event);
void QColumnView_virtualbase_timerEvent(VirtualQColumnView* self, QTimerEvent* event);
void QColumnView_virtualbase_inputMethodEvent(VirtualQColumnView* self, QInputMethodEvent* event);
bool QColumnView_virtualbase_eventFilter(VirtualQColumnView* self, QObject* object, QEvent* event);
QSize* QColumnView_virtualbase_viewportSizeHint(const VirtualQColumnView* self);
QSize* QColumnView_virtualbase_minimumSizeHint(const VirtualQColumnView* self);
void QColumnView_virtualbase_setupViewport(VirtualQColumnView* self, QWidget* viewport);
void QColumnView_virtualbase_paintEvent(VirtualQColumnView* self, QPaintEvent* param1);
void QColumnView_virtualbase_wheelEvent(VirtualQColumnView* self, QWheelEvent* param1);
void QColumnView_virtualbase_contextMenuEvent(VirtualQColumnView* self, QContextMenuEvent* param1);
void QColumnView_virtualbase_changeEvent(VirtualQColumnView* self, QEvent* param1);
int QColumnView_virtualbase_devType(const VirtualQColumnView* self);
void QColumnView_virtualbase_setVisible(VirtualQColumnView* self, bool visible);
int QColumnView_virtualbase_heightForWidth(const VirtualQColumnView* self, int param1);
bool QColumnView_virtualbase_hasHeightForWidth(const VirtualQColumnView* self);
QPaintEngine* QColumnView_virtualbase_paintEngine(const VirtualQColumnView* self);
void QColumnView_virtualbase_keyReleaseEvent(VirtualQColumnView* self, QKeyEvent* event);
void QColumnView_virtualbase_enterEvent(VirtualQColumnView* self, QEvent* event);
void QColumnView_virtualbase_leaveEvent(VirtualQColumnView* self, QEvent* event);
void QColumnView_virtualbase_moveEvent(VirtualQColumnView* self, QMoveEvent* event);
void QColumnView_virtualbase_closeEvent(VirtualQColumnView* self, QCloseEvent* event);
void QColumnView_virtualbase_tabletEvent(VirtualQColumnView* self, QTabletEvent* event);
void QColumnView_virtualbase_actionEvent(VirtualQColumnView* self, QActionEvent* event);
void QColumnView_virtualbase_showEvent(VirtualQColumnView* self, QShowEvent* event);
void QColumnView_virtualbase_hideEvent(VirtualQColumnView* self, QHideEvent* event);
bool QColumnView_virtualbase_nativeEvent(VirtualQColumnView* self, struct miqt_string eventType, void* message, long* result);
int QColumnView_virtualbase_metric(const VirtualQColumnView* self, int param1);
void QColumnView_virtualbase_initPainter(const VirtualQColumnView* self, QPainter* painter);
QPaintDevice* QColumnView_virtualbase_redirected(const VirtualQColumnView* self, QPoint* offset);
QPainter* QColumnView_virtualbase_sharedPainter(const VirtualQColumnView* self);
void QColumnView_virtualbase_childEvent(VirtualQColumnView* self, QChildEvent* event);
void QColumnView_virtualbase_customEvent(VirtualQColumnView* self, QEvent* event);
void QColumnView_virtualbase_connectNotify(VirtualQColumnView* self, QMetaMethod* signal);
void QColumnView_virtualbase_disconnectNotify(VirtualQColumnView* self, QMetaMethod* signal);

void QColumnView_protectedbase_initializeColumn(const VirtualQColumnView* self, QAbstractItemView* column);
void QColumnView_protectedbase_setHorizontalStepsPerItem(VirtualQColumnView* self, int steps);
int QColumnView_protectedbase_horizontalStepsPerItem(const VirtualQColumnView* self);
void QColumnView_protectedbase_setVerticalStepsPerItem(VirtualQColumnView* self, int steps);
int QColumnView_protectedbase_verticalStepsPerItem(const VirtualQColumnView* self);
int QColumnView_protectedbase_state(const VirtualQColumnView* self);
void QColumnView_protectedbase_setState(VirtualQColumnView* self, int state);
void QColumnView_protectedbase_scheduleDelayedItemsLayout(VirtualQColumnView* self);
void QColumnView_protectedbase_executeDelayedItemsLayout(VirtualQColumnView* self);
void QColumnView_protectedbase_setDirtyRegion(VirtualQColumnView* self, QRegion* region);
void QColumnView_protectedbase_scrollDirtyRegion(VirtualQColumnView* self, int dx, int dy);
QPoint* QColumnView_protectedbase_dirtyRegionOffset(const VirtualQColumnView* self);
void QColumnView_protectedbase_startAutoScroll(VirtualQColumnView* self);
void QColumnView_protectedbase_stopAutoScroll(VirtualQColumnView* self);
void QColumnView_protectedbase_doAutoScroll(VirtualQColumnView* self);
int QColumnView_protectedbase_dropIndicatorPosition(const VirtualQColumnView* self);
void QColumnView_protectedbase_setViewportMargins(VirtualQColumnView* self, int left, int top, int right, int bottom);
QMargins* QColumnView_protectedbase_viewportMargins(const VirtualQColumnView* self);
void QColumnView_protectedbase_drawFrame(VirtualQColumnView* self, QPainter* param1);
void QColumnView_protectedbase_initStyleOption(const VirtualQColumnView* self, QStyleOptionFrame* option);
void QColumnView_protectedbase_updateMicroFocus(VirtualQColumnView* self);
void QColumnView_protectedbase_create(VirtualQColumnView* self);
void QColumnView_protectedbase_destroy(VirtualQColumnView* self);
bool QColumnView_protectedbase_focusNextChild(VirtualQColumnView* self);
bool QColumnView_protectedbase_focusPreviousChild(VirtualQColumnView* self);
QObject* QColumnView_protectedbase_sender(const VirtualQColumnView* self);
int QColumnView_protectedbase_senderSignalIndex(const VirtualQColumnView* self);
int QColumnView_protectedbase_receivers(const VirtualQColumnView* self, const char* signal);
bool QColumnView_protectedbase_isSignalConnected(const VirtualQColumnView* self, QMetaMethod* signal);

const QMetaObject* QColumnView_staticMetaObject();
void QColumnView_delete(QColumnView* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
