#pragma once
#ifndef SEAQT_QTWIDGETS_GEN_QLISTWIDGET_H
#define SEAQT_QTWIDGETS_GEN_QLISTWIDGET_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../libseaqt/libseaqt.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
class QAbstractItemView;
class QAbstractScrollArea;
class QActionEvent;
class QBrush;
class QChildEvent;
class QCloseEvent;
class QColor;
class QContextMenuEvent;
class QDataStream;
class QDragEnterEvent;
class QDragLeaveEvent;
class QDragMoveEvent;
class QDropEvent;
class QEvent;
class QFocusEvent;
class QFont;
class QFrame;
class QHideEvent;
class QIcon;
class QInputMethodEvent;
class QItemSelection;
class QItemSelectionModel;
class QKeyEvent;
class QListView;
class QListWidget;
class QListWidgetItem;
class QMargins;
class QMetaMethod;
class QMetaObject;
class QMimeData;
class QModelIndex;
class QMouseEvent;
class QMoveEvent;
class QObject;
class QPaintDevice;
class QPaintEngine;
class QPaintEvent;
class QPainter;
class QPoint;
class QRect;
class QRegion;
class QResizeEvent;
class QShowEvent;
class QSize;
class QStyleOptionFrame;
class QStyleOptionViewItem;
class QTabletEvent;
class QTimerEvent;
class QVariant;
class QWheelEvent;
class QWidget;
#else
typedef struct QAbstractItemView QAbstractItemView;
typedef struct QAbstractScrollArea QAbstractScrollArea;
typedef struct QActionEvent QActionEvent;
typedef struct QBrush QBrush;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QColor QColor;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDataStream QDataStream;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QFont QFont;
typedef struct QFrame QFrame;
typedef struct QHideEvent QHideEvent;
typedef struct QIcon QIcon;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QItemSelection QItemSelection;
typedef struct QItemSelectionModel QItemSelectionModel;
typedef struct QKeyEvent QKeyEvent;
typedef struct QListView QListView;
typedef struct QListWidget QListWidget;
typedef struct QListWidgetItem QListWidgetItem;
typedef struct QMargins QMargins;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QRect QRect;
typedef struct QRegion QRegion;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QStyleOptionFrame QStyleOptionFrame;
typedef struct QStyleOptionViewItem QStyleOptionViewItem;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

typedef struct VirtualQListWidgetItem VirtualQListWidgetItem;
typedef struct QListWidgetItem_VTable{
	void (*destructor)(VirtualQListWidgetItem* self);
	QListWidgetItem* (*clone)(const VirtualQListWidgetItem* self);
	void (*setBackgroundColor)(VirtualQListWidgetItem* self, QColor* color);
	QVariant* (*data)(const VirtualQListWidgetItem* self, int role);
	void (*setData)(VirtualQListWidgetItem* self, int role, QVariant* value);
	bool (*operatorLesser)(const VirtualQListWidgetItem* self, QListWidgetItem* other);
	void (*read)(VirtualQListWidgetItem* self, QDataStream* in);
	void (*write)(const VirtualQListWidgetItem* self, QDataStream* out);
}QListWidgetItem_VTable;

const QListWidgetItem_VTable* QListWidgetItem_vtbl(const VirtualQListWidgetItem* self);
void* QListWidgetItem_vdata(const VirtualQListWidgetItem* self);
void QListWidgetItem_setVdata(VirtualQListWidgetItem* self, void* vdata);

VirtualQListWidgetItem* QListWidgetItem_new(const QListWidgetItem_VTable* vtbl, void* vdata);
VirtualQListWidgetItem* QListWidgetItem_new2(const QListWidgetItem_VTable* vtbl, void* vdata, struct miqt_string text);
VirtualQListWidgetItem* QListWidgetItem_new3(const QListWidgetItem_VTable* vtbl, void* vdata, QIcon* icon, struct miqt_string text);
VirtualQListWidgetItem* QListWidgetItem_new4(const QListWidgetItem_VTable* vtbl, void* vdata, QListWidgetItem* other);
VirtualQListWidgetItem* QListWidgetItem_new5(const QListWidgetItem_VTable* vtbl, void* vdata, QListWidget* listview);
VirtualQListWidgetItem* QListWidgetItem_new6(const QListWidgetItem_VTable* vtbl, void* vdata, QListWidget* listview, int type);
VirtualQListWidgetItem* QListWidgetItem_new7(const QListWidgetItem_VTable* vtbl, void* vdata, struct miqt_string text, QListWidget* listview);
VirtualQListWidgetItem* QListWidgetItem_new8(const QListWidgetItem_VTable* vtbl, void* vdata, struct miqt_string text, QListWidget* listview, int type);
VirtualQListWidgetItem* QListWidgetItem_new9(const QListWidgetItem_VTable* vtbl, void* vdata, QIcon* icon, struct miqt_string text, QListWidget* listview);
VirtualQListWidgetItem* QListWidgetItem_new10(const QListWidgetItem_VTable* vtbl, void* vdata, QIcon* icon, struct miqt_string text, QListWidget* listview, int type);

QListWidgetItem* QListWidgetItem_clone(const QListWidgetItem* self);
QListWidget* QListWidgetItem_listWidget(const QListWidgetItem* self);
void QListWidgetItem_setSelected(QListWidgetItem* self, bool select);
bool QListWidgetItem_isSelected(const QListWidgetItem* self);
void QListWidgetItem_setHidden(QListWidgetItem* self, bool hide);
bool QListWidgetItem_isHidden(const QListWidgetItem* self);
int QListWidgetItem_flags(const QListWidgetItem* self);
void QListWidgetItem_setFlags(QListWidgetItem* self, int flags);
struct miqt_string QListWidgetItem_text(const QListWidgetItem* self);
void QListWidgetItem_setText(QListWidgetItem* self, struct miqt_string text);
QIcon* QListWidgetItem_icon(const QListWidgetItem* self);
void QListWidgetItem_setIcon(QListWidgetItem* self, QIcon* icon);
struct miqt_string QListWidgetItem_statusTip(const QListWidgetItem* self);
void QListWidgetItem_setStatusTip(QListWidgetItem* self, struct miqt_string statusTip);
struct miqt_string QListWidgetItem_toolTip(const QListWidgetItem* self);
void QListWidgetItem_setToolTip(QListWidgetItem* self, struct miqt_string toolTip);
struct miqt_string QListWidgetItem_whatsThis(const QListWidgetItem* self);
void QListWidgetItem_setWhatsThis(QListWidgetItem* self, struct miqt_string whatsThis);
QFont* QListWidgetItem_font(const QListWidgetItem* self);
void QListWidgetItem_setFont(QListWidgetItem* self, QFont* font);
int QListWidgetItem_textAlignment(const QListWidgetItem* self);
void QListWidgetItem_setTextAlignment(QListWidgetItem* self, int alignment);
QColor* QListWidgetItem_backgroundColor(const QListWidgetItem* self);
void QListWidgetItem_setBackgroundColor(QListWidgetItem* self, QColor* color);
QBrush* QListWidgetItem_background(const QListWidgetItem* self);
void QListWidgetItem_setBackground(QListWidgetItem* self, QBrush* brush);
QColor* QListWidgetItem_textColor(const QListWidgetItem* self);
void QListWidgetItem_setTextColor(QListWidgetItem* self, QColor* color);
QBrush* QListWidgetItem_foreground(const QListWidgetItem* self);
void QListWidgetItem_setForeground(QListWidgetItem* self, QBrush* brush);
int QListWidgetItem_checkState(const QListWidgetItem* self);
void QListWidgetItem_setCheckState(QListWidgetItem* self, int state);
QSize* QListWidgetItem_sizeHint(const QListWidgetItem* self);
void QListWidgetItem_setSizeHint(QListWidgetItem* self, QSize* size);
QVariant* QListWidgetItem_data(const QListWidgetItem* self, int role);
void QListWidgetItem_setData(QListWidgetItem* self, int role, QVariant* value);
bool QListWidgetItem_operatorLesser(const QListWidgetItem* self, QListWidgetItem* other);
void QListWidgetItem_read(QListWidgetItem* self, QDataStream* in);
void QListWidgetItem_write(const QListWidgetItem* self, QDataStream* out);
void QListWidgetItem_operatorAssign(QListWidgetItem* self, QListWidgetItem* other);
int QListWidgetItem_type(const QListWidgetItem* self);

QListWidgetItem* QListWidgetItem_virtualbase_clone(const VirtualQListWidgetItem* self);
void QListWidgetItem_virtualbase_setBackgroundColor(VirtualQListWidgetItem* self, QColor* color);
QVariant* QListWidgetItem_virtualbase_data(const VirtualQListWidgetItem* self, int role);
void QListWidgetItem_virtualbase_setData(VirtualQListWidgetItem* self, int role, QVariant* value);
bool QListWidgetItem_virtualbase_operatorLesser(const VirtualQListWidgetItem* self, QListWidgetItem* other);
void QListWidgetItem_virtualbase_read(VirtualQListWidgetItem* self, QDataStream* in);
void QListWidgetItem_virtualbase_write(const VirtualQListWidgetItem* self, QDataStream* out);

void QListWidgetItem_delete(QListWidgetItem* self);

typedef struct VirtualQListWidget VirtualQListWidget;
typedef struct QListWidget_VTable{
	void (*destructor)(VirtualQListWidget* self);
	QMetaObject* (*metaObject)(const VirtualQListWidget* self);
	void* (*metacast)(VirtualQListWidget* self, const char* param1);
	int (*metacall)(VirtualQListWidget* self, int param1, int param2, void** param3);
	void (*setSelectionModel)(VirtualQListWidget* self, QItemSelectionModel* selectionModel);
	void (*dropEvent)(VirtualQListWidget* self, QDropEvent* event);
	bool (*event)(VirtualQListWidget* self, QEvent* e);
	struct miqt_array /* of struct miqt_string */  (*mimeTypes)(const VirtualQListWidget* self);
	QMimeData* (*mimeData)(const VirtualQListWidget* self, struct miqt_array /* of QListWidgetItem* */  items);
	bool (*dropMimeData)(VirtualQListWidget* self, int index, QMimeData* data, int action);
	int (*supportedDropActions)(const VirtualQListWidget* self);
	QRect* (*visualRect)(const VirtualQListWidget* self, QModelIndex* index);
	void (*scrollTo)(VirtualQListWidget* self, QModelIndex* index, int hint);
	QModelIndex* (*indexAt)(const VirtualQListWidget* self, QPoint* p);
	void (*doItemsLayout)(VirtualQListWidget* self);
	void (*reset)(VirtualQListWidget* self);
	void (*setRootIndex)(VirtualQListWidget* self, QModelIndex* index);
	void (*scrollContentsBy)(VirtualQListWidget* self, int dx, int dy);
	void (*dataChanged)(VirtualQListWidget* self, QModelIndex* topLeft, QModelIndex* bottomRight, struct miqt_array /* of int */  roles);
	void (*rowsInserted)(VirtualQListWidget* self, QModelIndex* parent, int start, int end);
	void (*rowsAboutToBeRemoved)(VirtualQListWidget* self, QModelIndex* parent, int start, int end);
	void (*mouseMoveEvent)(VirtualQListWidget* self, QMouseEvent* e);
	void (*mouseReleaseEvent)(VirtualQListWidget* self, QMouseEvent* e);
	void (*wheelEvent)(VirtualQListWidget* self, QWheelEvent* e);
	void (*timerEvent)(VirtualQListWidget* self, QTimerEvent* e);
	void (*resizeEvent)(VirtualQListWidget* self, QResizeEvent* e);
	void (*dragMoveEvent)(VirtualQListWidget* self, QDragMoveEvent* e);
	void (*dragLeaveEvent)(VirtualQListWidget* self, QDragLeaveEvent* e);
	void (*startDrag)(VirtualQListWidget* self, int supportedActions);
	QStyleOptionViewItem* (*viewOptions)(const VirtualQListWidget* self);
	void (*paintEvent)(VirtualQListWidget* self, QPaintEvent* e);
	int (*horizontalOffset)(const VirtualQListWidget* self);
	int (*verticalOffset)(const VirtualQListWidget* self);
	QModelIndex* (*moveCursor)(VirtualQListWidget* self, int cursorAction, int modifiers);
	void (*setSelection)(VirtualQListWidget* self, QRect* rect, int command);
	QRegion* (*visualRegionForSelection)(const VirtualQListWidget* self, QItemSelection* selection);
	struct miqt_array /* of QModelIndex* */  (*selectedIndexes)(const VirtualQListWidget* self);
	void (*updateGeometries)(VirtualQListWidget* self);
	bool (*isIndexHidden)(const VirtualQListWidget* self, QModelIndex* index);
	void (*selectionChanged)(VirtualQListWidget* self, QItemSelection* selected, QItemSelection* deselected);
	void (*currentChanged)(VirtualQListWidget* self, QModelIndex* current, QModelIndex* previous);
	QSize* (*viewportSizeHint)(const VirtualQListWidget* self);
	void (*keyboardSearch)(VirtualQListWidget* self, struct miqt_string search);
	int (*sizeHintForRow)(const VirtualQListWidget* self, int row);
	int (*sizeHintForColumn)(const VirtualQListWidget* self, int column);
	QVariant* (*inputMethodQuery)(const VirtualQListWidget* self, int query);
	void (*selectAll)(VirtualQListWidget* self);
	void (*updateEditorData)(VirtualQListWidget* self);
	void (*updateEditorGeometries)(VirtualQListWidget* self);
	void (*verticalScrollbarAction)(VirtualQListWidget* self, int action);
	void (*horizontalScrollbarAction)(VirtualQListWidget* self, int action);
	void (*verticalScrollbarValueChanged)(VirtualQListWidget* self, int value);
	void (*horizontalScrollbarValueChanged)(VirtualQListWidget* self, int value);
	void (*closeEditor)(VirtualQListWidget* self, QWidget* editor, int hint);
	void (*commitData)(VirtualQListWidget* self, QWidget* editor);
	void (*editorDestroyed)(VirtualQListWidget* self, QObject* editor);
	bool (*edit2)(VirtualQListWidget* self, QModelIndex* index, int trigger, QEvent* event);
	int (*selectionCommand)(const VirtualQListWidget* self, QModelIndex* index, QEvent* event);
	bool (*focusNextPrevChild)(VirtualQListWidget* self, bool next);
	bool (*viewportEvent)(VirtualQListWidget* self, QEvent* event);
	void (*mousePressEvent)(VirtualQListWidget* self, QMouseEvent* event);
	void (*mouseDoubleClickEvent)(VirtualQListWidget* self, QMouseEvent* event);
	void (*dragEnterEvent)(VirtualQListWidget* self, QDragEnterEvent* event);
	void (*focusInEvent)(VirtualQListWidget* self, QFocusEvent* event);
	void (*focusOutEvent)(VirtualQListWidget* self, QFocusEvent* event);
	void (*keyPressEvent)(VirtualQListWidget* self, QKeyEvent* event);
	void (*inputMethodEvent)(VirtualQListWidget* self, QInputMethodEvent* event);
	bool (*eventFilter)(VirtualQListWidget* self, QObject* object, QEvent* event);
	QSize* (*minimumSizeHint)(const VirtualQListWidget* self);
	QSize* (*sizeHint)(const VirtualQListWidget* self);
	void (*setupViewport)(VirtualQListWidget* self, QWidget* viewport);
	void (*contextMenuEvent)(VirtualQListWidget* self, QContextMenuEvent* param1);
	void (*changeEvent)(VirtualQListWidget* self, QEvent* param1);
	int (*devType)(const VirtualQListWidget* self);
	void (*setVisible)(VirtualQListWidget* self, bool visible);
	int (*heightForWidth)(const VirtualQListWidget* self, int param1);
	bool (*hasHeightForWidth)(const VirtualQListWidget* self);
	QPaintEngine* (*paintEngine)(const VirtualQListWidget* self);
	void (*keyReleaseEvent)(VirtualQListWidget* self, QKeyEvent* event);
	void (*enterEvent)(VirtualQListWidget* self, QEvent* event);
	void (*leaveEvent)(VirtualQListWidget* self, QEvent* event);
	void (*moveEvent)(VirtualQListWidget* self, QMoveEvent* event);
	void (*closeEvent)(VirtualQListWidget* self, QCloseEvent* event);
	void (*tabletEvent)(VirtualQListWidget* self, QTabletEvent* event);
	void (*actionEvent)(VirtualQListWidget* self, QActionEvent* event);
	void (*showEvent)(VirtualQListWidget* self, QShowEvent* event);
	void (*hideEvent)(VirtualQListWidget* self, QHideEvent* event);
	bool (*nativeEvent)(VirtualQListWidget* self, struct miqt_string eventType, void* message, long* result);
	int (*metric)(const VirtualQListWidget* self, int param1);
	void (*initPainter)(const VirtualQListWidget* self, QPainter* painter);
	QPaintDevice* (*redirected)(const VirtualQListWidget* self, QPoint* offset);
	QPainter* (*sharedPainter)(const VirtualQListWidget* self);
	void (*childEvent)(VirtualQListWidget* self, QChildEvent* event);
	void (*customEvent)(VirtualQListWidget* self, QEvent* event);
	void (*connectNotify)(VirtualQListWidget* self, QMetaMethod* signal);
	void (*disconnectNotify)(VirtualQListWidget* self, QMetaMethod* signal);
}QListWidget_VTable;

const QListWidget_VTable* QListWidget_vtbl(const VirtualQListWidget* self);
void* QListWidget_vdata(const VirtualQListWidget* self);
void QListWidget_setVdata(VirtualQListWidget* self, void* vdata);

VirtualQListWidget* QListWidget_new(const QListWidget_VTable* vtbl, void* vdata, QWidget* parent);
VirtualQListWidget* QListWidget_new2(const QListWidget_VTable* vtbl, void* vdata);

void QListWidget_virtbase(QListWidget* src, QListView** outptr_QListView);
QMetaObject* QListWidget_metaObject(const QListWidget* self);
void* QListWidget_metacast(QListWidget* self, const char* param1);
int QListWidget_metacall(QListWidget* self, int param1, int param2, void** param3);
struct miqt_string QListWidget_tr(const char* s);
struct miqt_string QListWidget_trUtf8(const char* s);
void QListWidget_setSelectionModel(QListWidget* self, QItemSelectionModel* selectionModel);
QListWidgetItem* QListWidget_item(const QListWidget* self, int row);
int QListWidget_row(const QListWidget* self, QListWidgetItem* item);
void QListWidget_insertItem(QListWidget* self, int row, QListWidgetItem* item);
void QListWidget_insertItem2(QListWidget* self, int row, struct miqt_string label);
void QListWidget_insertItems(QListWidget* self, int row, struct miqt_array /* of struct miqt_string */  labels);
void QListWidget_addItem(QListWidget* self, struct miqt_string label);
void QListWidget_addItemWithItem(QListWidget* self, QListWidgetItem* item);
void QListWidget_addItems(QListWidget* self, struct miqt_array /* of struct miqt_string */  labels);
QListWidgetItem* QListWidget_takeItem(QListWidget* self, int row);
int QListWidget_count(const QListWidget* self);
QListWidgetItem* QListWidget_currentItem(const QListWidget* self);
void QListWidget_setCurrentItem(QListWidget* self, QListWidgetItem* item);
void QListWidget_setCurrentItem2(QListWidget* self, QListWidgetItem* item, int command);
int QListWidget_currentRow(const QListWidget* self);
void QListWidget_setCurrentRow(QListWidget* self, int row);
void QListWidget_setCurrentRow2(QListWidget* self, int row, int command);
QListWidgetItem* QListWidget_itemAt(const QListWidget* self, QPoint* p);
QListWidgetItem* QListWidget_itemAt2(const QListWidget* self, int x, int y);
QRect* QListWidget_visualItemRect(const QListWidget* self, QListWidgetItem* item);
void QListWidget_sortItems(QListWidget* self);
void QListWidget_setSortingEnabled(QListWidget* self, bool enable);
bool QListWidget_isSortingEnabled(const QListWidget* self);
void QListWidget_editItem(QListWidget* self, QListWidgetItem* item);
void QListWidget_openPersistentEditor(QListWidget* self, QListWidgetItem* item);
void QListWidget_closePersistentEditor(QListWidget* self, QListWidgetItem* item);
bool QListWidget_isPersistentEditorOpen(const QListWidget* self, QListWidgetItem* item);
QWidget* QListWidget_itemWidget(const QListWidget* self, QListWidgetItem* item);
void QListWidget_setItemWidget(QListWidget* self, QListWidgetItem* item, QWidget* widget);
void QListWidget_removeItemWidget(QListWidget* self, QListWidgetItem* item);
bool QListWidget_isItemSelected(const QListWidget* self, QListWidgetItem* item);
void QListWidget_setItemSelected(QListWidget* self, QListWidgetItem* item, bool select);
struct miqt_array /* of QListWidgetItem* */  QListWidget_selectedItems(const QListWidget* self);
struct miqt_array /* of QListWidgetItem* */  QListWidget_findItems(const QListWidget* self, struct miqt_string text, int flags);
bool QListWidget_isItemHidden(const QListWidget* self, QListWidgetItem* item);
void QListWidget_setItemHidden(QListWidget* self, QListWidgetItem* item, bool hide);
void QListWidget_dropEvent(QListWidget* self, QDropEvent* event);
void QListWidget_scrollToItem(QListWidget* self, QListWidgetItem* item);
void QListWidget_clear(QListWidget* self);
void QListWidget_itemPressed(QListWidget* self, QListWidgetItem* item);
void QListWidget_connect_itemPressed(VirtualQListWidget* self, intptr_t slot, void (*callback)(intptr_t, QListWidgetItem*), void (*release)(intptr_t));
void QListWidget_itemClicked(QListWidget* self, QListWidgetItem* item);
void QListWidget_connect_itemClicked(VirtualQListWidget* self, intptr_t slot, void (*callback)(intptr_t, QListWidgetItem*), void (*release)(intptr_t));
void QListWidget_itemDoubleClicked(QListWidget* self, QListWidgetItem* item);
void QListWidget_connect_itemDoubleClicked(VirtualQListWidget* self, intptr_t slot, void (*callback)(intptr_t, QListWidgetItem*), void (*release)(intptr_t));
void QListWidget_itemActivated(QListWidget* self, QListWidgetItem* item);
void QListWidget_connect_itemActivated(VirtualQListWidget* self, intptr_t slot, void (*callback)(intptr_t, QListWidgetItem*), void (*release)(intptr_t));
void QListWidget_itemEntered(QListWidget* self, QListWidgetItem* item);
void QListWidget_connect_itemEntered(VirtualQListWidget* self, intptr_t slot, void (*callback)(intptr_t, QListWidgetItem*), void (*release)(intptr_t));
void QListWidget_itemChanged(QListWidget* self, QListWidgetItem* item);
void QListWidget_connect_itemChanged(VirtualQListWidget* self, intptr_t slot, void (*callback)(intptr_t, QListWidgetItem*), void (*release)(intptr_t));
void QListWidget_currentItemChanged(QListWidget* self, QListWidgetItem* current, QListWidgetItem* previous);
void QListWidget_connect_currentItemChanged(VirtualQListWidget* self, intptr_t slot, void (*callback)(intptr_t, QListWidgetItem*, QListWidgetItem*), void (*release)(intptr_t));
void QListWidget_currentTextChanged(QListWidget* self, struct miqt_string currentText);
void QListWidget_connect_currentTextChanged(VirtualQListWidget* self, intptr_t slot, void (*callback)(intptr_t, struct miqt_string), void (*release)(intptr_t));
void QListWidget_currentRowChanged(QListWidget* self, int currentRow);
void QListWidget_connect_currentRowChanged(VirtualQListWidget* self, intptr_t slot, void (*callback)(intptr_t, int), void (*release)(intptr_t));
void QListWidget_itemSelectionChanged(QListWidget* self);
void QListWidget_connect_itemSelectionChanged(VirtualQListWidget* self, intptr_t slot, void (*callback)(intptr_t), void (*release)(intptr_t));
bool QListWidget_event(QListWidget* self, QEvent* e);
struct miqt_array /* of struct miqt_string */  QListWidget_mimeTypes(const QListWidget* self);
QMimeData* QListWidget_mimeData(const QListWidget* self, struct miqt_array /* of QListWidgetItem* */  items);
bool QListWidget_dropMimeData(QListWidget* self, int index, QMimeData* data, int action);
int QListWidget_supportedDropActions(const QListWidget* self);
struct miqt_string QListWidget_tr2(const char* s, const char* c);
struct miqt_string QListWidget_tr3(const char* s, const char* c, int n);
struct miqt_string QListWidget_trUtf82(const char* s, const char* c);
struct miqt_string QListWidget_trUtf83(const char* s, const char* c, int n);
void QListWidget_sortItems1(QListWidget* self, int order);
void QListWidget_scrollToItem2(QListWidget* self, QListWidgetItem* item, int hint);

QMetaObject* QListWidget_virtualbase_metaObject(const VirtualQListWidget* self);
void* QListWidget_virtualbase_metacast(VirtualQListWidget* self, const char* param1);
int QListWidget_virtualbase_metacall(VirtualQListWidget* self, int param1, int param2, void** param3);
void QListWidget_virtualbase_setSelectionModel(VirtualQListWidget* self, QItemSelectionModel* selectionModel);
void QListWidget_virtualbase_dropEvent(VirtualQListWidget* self, QDropEvent* event);
bool QListWidget_virtualbase_event(VirtualQListWidget* self, QEvent* e);
struct miqt_array /* of struct miqt_string */  QListWidget_virtualbase_mimeTypes(const VirtualQListWidget* self);
QMimeData* QListWidget_virtualbase_mimeData(const VirtualQListWidget* self, struct miqt_array /* of QListWidgetItem* */  items);
bool QListWidget_virtualbase_dropMimeData(VirtualQListWidget* self, int index, QMimeData* data, int action);
int QListWidget_virtualbase_supportedDropActions(const VirtualQListWidget* self);
QRect* QListWidget_virtualbase_visualRect(const VirtualQListWidget* self, QModelIndex* index);
void QListWidget_virtualbase_scrollTo(VirtualQListWidget* self, QModelIndex* index, int hint);
QModelIndex* QListWidget_virtualbase_indexAt(const VirtualQListWidget* self, QPoint* p);
void QListWidget_virtualbase_doItemsLayout(VirtualQListWidget* self);
void QListWidget_virtualbase_reset(VirtualQListWidget* self);
void QListWidget_virtualbase_setRootIndex(VirtualQListWidget* self, QModelIndex* index);
void QListWidget_virtualbase_scrollContentsBy(VirtualQListWidget* self, int dx, int dy);
void QListWidget_virtualbase_dataChanged(VirtualQListWidget* self, QModelIndex* topLeft, QModelIndex* bottomRight, struct miqt_array /* of int */  roles);
void QListWidget_virtualbase_rowsInserted(VirtualQListWidget* self, QModelIndex* parent, int start, int end);
void QListWidget_virtualbase_rowsAboutToBeRemoved(VirtualQListWidget* self, QModelIndex* parent, int start, int end);
void QListWidget_virtualbase_mouseMoveEvent(VirtualQListWidget* self, QMouseEvent* e);
void QListWidget_virtualbase_mouseReleaseEvent(VirtualQListWidget* self, QMouseEvent* e);
void QListWidget_virtualbase_wheelEvent(VirtualQListWidget* self, QWheelEvent* e);
void QListWidget_virtualbase_timerEvent(VirtualQListWidget* self, QTimerEvent* e);
void QListWidget_virtualbase_resizeEvent(VirtualQListWidget* self, QResizeEvent* e);
void QListWidget_virtualbase_dragMoveEvent(VirtualQListWidget* self, QDragMoveEvent* e);
void QListWidget_virtualbase_dragLeaveEvent(VirtualQListWidget* self, QDragLeaveEvent* e);
void QListWidget_virtualbase_startDrag(VirtualQListWidget* self, int supportedActions);
QStyleOptionViewItem* QListWidget_virtualbase_viewOptions(const VirtualQListWidget* self);
void QListWidget_virtualbase_paintEvent(VirtualQListWidget* self, QPaintEvent* e);
int QListWidget_virtualbase_horizontalOffset(const VirtualQListWidget* self);
int QListWidget_virtualbase_verticalOffset(const VirtualQListWidget* self);
QModelIndex* QListWidget_virtualbase_moveCursor(VirtualQListWidget* self, int cursorAction, int modifiers);
void QListWidget_virtualbase_setSelection(VirtualQListWidget* self, QRect* rect, int command);
QRegion* QListWidget_virtualbase_visualRegionForSelection(const VirtualQListWidget* self, QItemSelection* selection);
struct miqt_array /* of QModelIndex* */  QListWidget_virtualbase_selectedIndexes(const VirtualQListWidget* self);
void QListWidget_virtualbase_updateGeometries(VirtualQListWidget* self);
bool QListWidget_virtualbase_isIndexHidden(const VirtualQListWidget* self, QModelIndex* index);
void QListWidget_virtualbase_selectionChanged(VirtualQListWidget* self, QItemSelection* selected, QItemSelection* deselected);
void QListWidget_virtualbase_currentChanged(VirtualQListWidget* self, QModelIndex* current, QModelIndex* previous);
QSize* QListWidget_virtualbase_viewportSizeHint(const VirtualQListWidget* self);
void QListWidget_virtualbase_keyboardSearch(VirtualQListWidget* self, struct miqt_string search);
int QListWidget_virtualbase_sizeHintForRow(const VirtualQListWidget* self, int row);
int QListWidget_virtualbase_sizeHintForColumn(const VirtualQListWidget* self, int column);
QVariant* QListWidget_virtualbase_inputMethodQuery(const VirtualQListWidget* self, int query);
void QListWidget_virtualbase_selectAll(VirtualQListWidget* self);
void QListWidget_virtualbase_updateEditorData(VirtualQListWidget* self);
void QListWidget_virtualbase_updateEditorGeometries(VirtualQListWidget* self);
void QListWidget_virtualbase_verticalScrollbarAction(VirtualQListWidget* self, int action);
void QListWidget_virtualbase_horizontalScrollbarAction(VirtualQListWidget* self, int action);
void QListWidget_virtualbase_verticalScrollbarValueChanged(VirtualQListWidget* self, int value);
void QListWidget_virtualbase_horizontalScrollbarValueChanged(VirtualQListWidget* self, int value);
void QListWidget_virtualbase_closeEditor(VirtualQListWidget* self, QWidget* editor, int hint);
void QListWidget_virtualbase_commitData(VirtualQListWidget* self, QWidget* editor);
void QListWidget_virtualbase_editorDestroyed(VirtualQListWidget* self, QObject* editor);
bool QListWidget_virtualbase_edit2(VirtualQListWidget* self, QModelIndex* index, int trigger, QEvent* event);
int QListWidget_virtualbase_selectionCommand(const VirtualQListWidget* self, QModelIndex* index, QEvent* event);
bool QListWidget_virtualbase_focusNextPrevChild(VirtualQListWidget* self, bool next);
bool QListWidget_virtualbase_viewportEvent(VirtualQListWidget* self, QEvent* event);
void QListWidget_virtualbase_mousePressEvent(VirtualQListWidget* self, QMouseEvent* event);
void QListWidget_virtualbase_mouseDoubleClickEvent(VirtualQListWidget* self, QMouseEvent* event);
void QListWidget_virtualbase_dragEnterEvent(VirtualQListWidget* self, QDragEnterEvent* event);
void QListWidget_virtualbase_focusInEvent(VirtualQListWidget* self, QFocusEvent* event);
void QListWidget_virtualbase_focusOutEvent(VirtualQListWidget* self, QFocusEvent* event);
void QListWidget_virtualbase_keyPressEvent(VirtualQListWidget* self, QKeyEvent* event);
void QListWidget_virtualbase_inputMethodEvent(VirtualQListWidget* self, QInputMethodEvent* event);
bool QListWidget_virtualbase_eventFilter(VirtualQListWidget* self, QObject* object, QEvent* event);
QSize* QListWidget_virtualbase_minimumSizeHint(const VirtualQListWidget* self);
QSize* QListWidget_virtualbase_sizeHint(const VirtualQListWidget* self);
void QListWidget_virtualbase_setupViewport(VirtualQListWidget* self, QWidget* viewport);
void QListWidget_virtualbase_contextMenuEvent(VirtualQListWidget* self, QContextMenuEvent* param1);
void QListWidget_virtualbase_changeEvent(VirtualQListWidget* self, QEvent* param1);
int QListWidget_virtualbase_devType(const VirtualQListWidget* self);
void QListWidget_virtualbase_setVisible(VirtualQListWidget* self, bool visible);
int QListWidget_virtualbase_heightForWidth(const VirtualQListWidget* self, int param1);
bool QListWidget_virtualbase_hasHeightForWidth(const VirtualQListWidget* self);
QPaintEngine* QListWidget_virtualbase_paintEngine(const VirtualQListWidget* self);
void QListWidget_virtualbase_keyReleaseEvent(VirtualQListWidget* self, QKeyEvent* event);
void QListWidget_virtualbase_enterEvent(VirtualQListWidget* self, QEvent* event);
void QListWidget_virtualbase_leaveEvent(VirtualQListWidget* self, QEvent* event);
void QListWidget_virtualbase_moveEvent(VirtualQListWidget* self, QMoveEvent* event);
void QListWidget_virtualbase_closeEvent(VirtualQListWidget* self, QCloseEvent* event);
void QListWidget_virtualbase_tabletEvent(VirtualQListWidget* self, QTabletEvent* event);
void QListWidget_virtualbase_actionEvent(VirtualQListWidget* self, QActionEvent* event);
void QListWidget_virtualbase_showEvent(VirtualQListWidget* self, QShowEvent* event);
void QListWidget_virtualbase_hideEvent(VirtualQListWidget* self, QHideEvent* event);
bool QListWidget_virtualbase_nativeEvent(VirtualQListWidget* self, struct miqt_string eventType, void* message, long* result);
int QListWidget_virtualbase_metric(const VirtualQListWidget* self, int param1);
void QListWidget_virtualbase_initPainter(const VirtualQListWidget* self, QPainter* painter);
QPaintDevice* QListWidget_virtualbase_redirected(const VirtualQListWidget* self, QPoint* offset);
QPainter* QListWidget_virtualbase_sharedPainter(const VirtualQListWidget* self);
void QListWidget_virtualbase_childEvent(VirtualQListWidget* self, QChildEvent* event);
void QListWidget_virtualbase_customEvent(VirtualQListWidget* self, QEvent* event);
void QListWidget_virtualbase_connectNotify(VirtualQListWidget* self, QMetaMethod* signal);
void QListWidget_virtualbase_disconnectNotify(VirtualQListWidget* self, QMetaMethod* signal);

struct miqt_array /* of QListWidgetItem* */  QListWidget_protectedbase_items(const VirtualQListWidget* self, QMimeData* data);
QModelIndex* QListWidget_protectedbase_indexFromItem(const VirtualQListWidget* self, QListWidgetItem* item);
QModelIndex* QListWidget_protectedbase_indexFromItemWithItem(const VirtualQListWidget* self, QListWidgetItem* item);
QListWidgetItem* QListWidget_protectedbase_itemFromIndex(const VirtualQListWidget* self, QModelIndex* index);
void QListWidget_protectedbase_resizeContents(VirtualQListWidget* self, int width, int height);
QSize* QListWidget_protectedbase_contentsSize(const VirtualQListWidget* self);
QRect* QListWidget_protectedbase_rectForIndex(const VirtualQListWidget* self, QModelIndex* index);
void QListWidget_protectedbase_setPositionForIndex(VirtualQListWidget* self, QPoint* position, QModelIndex* index);
void QListWidget_protectedbase_setHorizontalStepsPerItem(VirtualQListWidget* self, int steps);
int QListWidget_protectedbase_horizontalStepsPerItem(const VirtualQListWidget* self);
void QListWidget_protectedbase_setVerticalStepsPerItem(VirtualQListWidget* self, int steps);
int QListWidget_protectedbase_verticalStepsPerItem(const VirtualQListWidget* self);
int QListWidget_protectedbase_state(const VirtualQListWidget* self);
void QListWidget_protectedbase_setState(VirtualQListWidget* self, int state);
void QListWidget_protectedbase_scheduleDelayedItemsLayout(VirtualQListWidget* self);
void QListWidget_protectedbase_executeDelayedItemsLayout(VirtualQListWidget* self);
void QListWidget_protectedbase_setDirtyRegion(VirtualQListWidget* self, QRegion* region);
void QListWidget_protectedbase_scrollDirtyRegion(VirtualQListWidget* self, int dx, int dy);
QPoint* QListWidget_protectedbase_dirtyRegionOffset(const VirtualQListWidget* self);
void QListWidget_protectedbase_startAutoScroll(VirtualQListWidget* self);
void QListWidget_protectedbase_stopAutoScroll(VirtualQListWidget* self);
void QListWidget_protectedbase_doAutoScroll(VirtualQListWidget* self);
int QListWidget_protectedbase_dropIndicatorPosition(const VirtualQListWidget* self);
void QListWidget_protectedbase_setViewportMargins(VirtualQListWidget* self, int left, int top, int right, int bottom);
QMargins* QListWidget_protectedbase_viewportMargins(const VirtualQListWidget* self);
void QListWidget_protectedbase_drawFrame(VirtualQListWidget* self, QPainter* param1);
void QListWidget_protectedbase_initStyleOption(const VirtualQListWidget* self, QStyleOptionFrame* option);
void QListWidget_protectedbase_updateMicroFocus(VirtualQListWidget* self);
void QListWidget_protectedbase_create(VirtualQListWidget* self);
void QListWidget_protectedbase_destroy(VirtualQListWidget* self);
bool QListWidget_protectedbase_focusNextChild(VirtualQListWidget* self);
bool QListWidget_protectedbase_focusPreviousChild(VirtualQListWidget* self);
QObject* QListWidget_protectedbase_sender(const VirtualQListWidget* self);
int QListWidget_protectedbase_senderSignalIndex(const VirtualQListWidget* self);
int QListWidget_protectedbase_receivers(const VirtualQListWidget* self, const char* signal);
bool QListWidget_protectedbase_isSignalConnected(const VirtualQListWidget* self, QMetaMethod* signal);

const QMetaObject* QListWidget_staticMetaObject();
void QListWidget_delete(QListWidget* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
