#pragma once
#ifndef SEAQT_QTWIDGETS_GEN_QTABLEWIDGET_H
#define SEAQT_QTWIDGETS_GEN_QTABLEWIDGET_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../libseaqt/libseaqt.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
class QAbstractItemDelegate;
class QAbstractItemView;
class QAbstractScrollArea;
class QActionEvent;
class QBrush;
class QChildEvent;
class QCloseEvent;
class QContextMenuEvent;
class QDataStream;
class QDragEnterEvent;
class QDragLeaveEvent;
class QDragMoveEvent;
class QDropEvent;
class QEnterEvent;
class QEvent;
class QFocusEvent;
class QFont;
class QFrame;
class QHideEvent;
class QIcon;
class QInputMethodEvent;
class QItemSelection;
class QItemSelectionModel;
class QKeyEvent;
class QMargins;
class QMetaMethod;
class QMetaObject;
class QMimeData;
class QModelIndex;
class QMouseEvent;
class QMoveEvent;
class QObject;
class QPaintDevice;
class QPaintEngine;
class QPaintEvent;
class QPainter;
class QPoint;
class QRect;
class QRegion;
class QResizeEvent;
class QShowEvent;
class QSize;
class QStyleOptionFrame;
class QStyleOptionViewItem;
class QTableView;
class QTableWidget;
class QTableWidgetItem;
class QTableWidgetSelectionRange;
class QTabletEvent;
class QTimerEvent;
class QVariant;
class QWheelEvent;
class QWidget;
#else
typedef struct QAbstractItemDelegate QAbstractItemDelegate;
typedef struct QAbstractItemView QAbstractItemView;
typedef struct QAbstractScrollArea QAbstractScrollArea;
typedef struct QActionEvent QActionEvent;
typedef struct QBrush QBrush;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDataStream QDataStream;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEnterEvent QEnterEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QFont QFont;
typedef struct QFrame QFrame;
typedef struct QHideEvent QHideEvent;
typedef struct QIcon QIcon;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QItemSelection QItemSelection;
typedef struct QItemSelectionModel QItemSelectionModel;
typedef struct QKeyEvent QKeyEvent;
typedef struct QMargins QMargins;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QRect QRect;
typedef struct QRegion QRegion;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QStyleOptionFrame QStyleOptionFrame;
typedef struct QStyleOptionViewItem QStyleOptionViewItem;
typedef struct QTableView QTableView;
typedef struct QTableWidget QTableWidget;
typedef struct QTableWidgetItem QTableWidgetItem;
typedef struct QTableWidgetSelectionRange QTableWidgetSelectionRange;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

QTableWidgetSelectionRange* QTableWidgetSelectionRange_new();
QTableWidgetSelectionRange* QTableWidgetSelectionRange_new2(int top, int left, int bottom, int right);

int QTableWidgetSelectionRange_topRow(const QTableWidgetSelectionRange* self);
int QTableWidgetSelectionRange_bottomRow(const QTableWidgetSelectionRange* self);
int QTableWidgetSelectionRange_leftColumn(const QTableWidgetSelectionRange* self);
int QTableWidgetSelectionRange_rightColumn(const QTableWidgetSelectionRange* self);
int QTableWidgetSelectionRange_rowCount(const QTableWidgetSelectionRange* self);
int QTableWidgetSelectionRange_columnCount(const QTableWidgetSelectionRange* self);

void QTableWidgetSelectionRange_delete(QTableWidgetSelectionRange* self);

typedef struct VirtualQTableWidgetItem VirtualQTableWidgetItem;
typedef struct QTableWidgetItem_VTable{
	void (*destructor)(VirtualQTableWidgetItem* self);
	QTableWidgetItem* (*clone)(const VirtualQTableWidgetItem* self);
	QVariant* (*data)(const VirtualQTableWidgetItem* self, int role);
	void (*setData)(VirtualQTableWidgetItem* self, int role, QVariant* value);
	bool (*operatorLesser)(const VirtualQTableWidgetItem* self, QTableWidgetItem* other);
	void (*read)(VirtualQTableWidgetItem* self, QDataStream* in);
	void (*write)(const VirtualQTableWidgetItem* self, QDataStream* out);
}QTableWidgetItem_VTable;

const QTableWidgetItem_VTable* QTableWidgetItem_vtbl(const VirtualQTableWidgetItem* self);
void* QTableWidgetItem_vdata(const VirtualQTableWidgetItem* self);
void QTableWidgetItem_setVdata(VirtualQTableWidgetItem* self, void* vdata);

VirtualQTableWidgetItem* QTableWidgetItem_new(const QTableWidgetItem_VTable* vtbl, void* vdata);
VirtualQTableWidgetItem* QTableWidgetItem_new2(const QTableWidgetItem_VTable* vtbl, void* vdata, struct miqt_string text);
VirtualQTableWidgetItem* QTableWidgetItem_new3(const QTableWidgetItem_VTable* vtbl, void* vdata, QIcon* icon, struct miqt_string text);
VirtualQTableWidgetItem* QTableWidgetItem_new4(const QTableWidgetItem_VTable* vtbl, void* vdata, QTableWidgetItem* other);
VirtualQTableWidgetItem* QTableWidgetItem_new5(const QTableWidgetItem_VTable* vtbl, void* vdata, int type);
VirtualQTableWidgetItem* QTableWidgetItem_new6(const QTableWidgetItem_VTable* vtbl, void* vdata, struct miqt_string text, int type);
VirtualQTableWidgetItem* QTableWidgetItem_new7(const QTableWidgetItem_VTable* vtbl, void* vdata, QIcon* icon, struct miqt_string text, int type);

QTableWidgetItem* QTableWidgetItem_clone(const QTableWidgetItem* self);
QTableWidget* QTableWidgetItem_tableWidget(const QTableWidgetItem* self);
int QTableWidgetItem_row(const QTableWidgetItem* self);
int QTableWidgetItem_column(const QTableWidgetItem* self);
void QTableWidgetItem_setSelected(QTableWidgetItem* self, bool select);
bool QTableWidgetItem_isSelected(const QTableWidgetItem* self);
int QTableWidgetItem_flags(const QTableWidgetItem* self);
void QTableWidgetItem_setFlags(QTableWidgetItem* self, int flags);
struct miqt_string QTableWidgetItem_text(const QTableWidgetItem* self);
void QTableWidgetItem_setText(QTableWidgetItem* self, struct miqt_string text);
QIcon* QTableWidgetItem_icon(const QTableWidgetItem* self);
void QTableWidgetItem_setIcon(QTableWidgetItem* self, QIcon* icon);
struct miqt_string QTableWidgetItem_statusTip(const QTableWidgetItem* self);
void QTableWidgetItem_setStatusTip(QTableWidgetItem* self, struct miqt_string statusTip);
struct miqt_string QTableWidgetItem_toolTip(const QTableWidgetItem* self);
void QTableWidgetItem_setToolTip(QTableWidgetItem* self, struct miqt_string toolTip);
struct miqt_string QTableWidgetItem_whatsThis(const QTableWidgetItem* self);
void QTableWidgetItem_setWhatsThis(QTableWidgetItem* self, struct miqt_string whatsThis);
QFont* QTableWidgetItem_font(const QTableWidgetItem* self);
void QTableWidgetItem_setFont(QTableWidgetItem* self, QFont* font);
int QTableWidgetItem_textAlignment(const QTableWidgetItem* self);
void QTableWidgetItem_setTextAlignment(QTableWidgetItem* self, int alignment);
void QTableWidgetItem_setTextAlignmentWithAlignment(QTableWidgetItem* self, int alignment);
void QTableWidgetItem_setTextAlignment2(QTableWidgetItem* self, int alignment);
QBrush* QTableWidgetItem_background(const QTableWidgetItem* self);
void QTableWidgetItem_setBackground(QTableWidgetItem* self, QBrush* brush);
QBrush* QTableWidgetItem_foreground(const QTableWidgetItem* self);
void QTableWidgetItem_setForeground(QTableWidgetItem* self, QBrush* brush);
int QTableWidgetItem_checkState(const QTableWidgetItem* self);
void QTableWidgetItem_setCheckState(QTableWidgetItem* self, int state);
QSize* QTableWidgetItem_sizeHint(const QTableWidgetItem* self);
void QTableWidgetItem_setSizeHint(QTableWidgetItem* self, QSize* size);
QVariant* QTableWidgetItem_data(const QTableWidgetItem* self, int role);
void QTableWidgetItem_setData(QTableWidgetItem* self, int role, QVariant* value);
bool QTableWidgetItem_operatorLesser(const QTableWidgetItem* self, QTableWidgetItem* other);
void QTableWidgetItem_read(QTableWidgetItem* self, QDataStream* in);
void QTableWidgetItem_write(const QTableWidgetItem* self, QDataStream* out);
void QTableWidgetItem_operatorAssign(QTableWidgetItem* self, QTableWidgetItem* other);
int QTableWidgetItem_type(const QTableWidgetItem* self);

QTableWidgetItem* QTableWidgetItem_virtualbase_clone(const VirtualQTableWidgetItem* self);
QVariant* QTableWidgetItem_virtualbase_data(const VirtualQTableWidgetItem* self, int role);
void QTableWidgetItem_virtualbase_setData(VirtualQTableWidgetItem* self, int role, QVariant* value);
bool QTableWidgetItem_virtualbase_operatorLesser(const VirtualQTableWidgetItem* self, QTableWidgetItem* other);
void QTableWidgetItem_virtualbase_read(VirtualQTableWidgetItem* self, QDataStream* in);
void QTableWidgetItem_virtualbase_write(const VirtualQTableWidgetItem* self, QDataStream* out);

void QTableWidgetItem_delete(QTableWidgetItem* self);

typedef struct VirtualQTableWidget VirtualQTableWidget;
typedef struct QTableWidget_VTable{
	void (*destructor)(VirtualQTableWidget* self);
	QMetaObject* (*metaObject)(const VirtualQTableWidget* self);
	void* (*metacast)(VirtualQTableWidget* self, const char* param1);
	int (*metacall)(VirtualQTableWidget* self, int param1, int param2, void** param3);
	bool (*event)(VirtualQTableWidget* self, QEvent* e);
	struct miqt_array /* of struct miqt_string */  (*mimeTypes)(const VirtualQTableWidget* self);
	QMimeData* (*mimeData)(const VirtualQTableWidget* self, struct miqt_array /* of QTableWidgetItem* */  items);
	bool (*dropMimeData)(VirtualQTableWidget* self, int row, int column, QMimeData* data, int action);
	int (*supportedDropActions)(const VirtualQTableWidget* self);
	void (*dropEvent)(VirtualQTableWidget* self, QDropEvent* event);
	void (*setRootIndex)(VirtualQTableWidget* self, QModelIndex* index);
	void (*setSelectionModel)(VirtualQTableWidget* self, QItemSelectionModel* selectionModel);
	void (*doItemsLayout)(VirtualQTableWidget* self);
	QRect* (*visualRect)(const VirtualQTableWidget* self, QModelIndex* index);
	void (*scrollTo)(VirtualQTableWidget* self, QModelIndex* index, int hint);
	QModelIndex* (*indexAt)(const VirtualQTableWidget* self, QPoint* p);
	void (*scrollContentsBy)(VirtualQTableWidget* self, int dx, int dy);
	void (*initViewItemOption)(const VirtualQTableWidget* self, QStyleOptionViewItem* option);
	void (*paintEvent)(VirtualQTableWidget* self, QPaintEvent* e);
	void (*timerEvent)(VirtualQTableWidget* self, QTimerEvent* event);
	int (*horizontalOffset)(const VirtualQTableWidget* self);
	int (*verticalOffset)(const VirtualQTableWidget* self);
	QModelIndex* (*moveCursor)(VirtualQTableWidget* self, int cursorAction, int modifiers);
	void (*setSelection)(VirtualQTableWidget* self, QRect* rect, int command);
	QRegion* (*visualRegionForSelection)(const VirtualQTableWidget* self, QItemSelection* selection);
	struct miqt_array /* of QModelIndex* */  (*selectedIndexes)(const VirtualQTableWidget* self);
	void (*updateGeometries)(VirtualQTableWidget* self);
	QSize* (*viewportSizeHint)(const VirtualQTableWidget* self);
	int (*sizeHintForRow)(const VirtualQTableWidget* self, int row);
	int (*sizeHintForColumn)(const VirtualQTableWidget* self, int column);
	void (*verticalScrollbarAction)(VirtualQTableWidget* self, int action);
	void (*horizontalScrollbarAction)(VirtualQTableWidget* self, int action);
	bool (*isIndexHidden)(const VirtualQTableWidget* self, QModelIndex* index);
	void (*selectionChanged)(VirtualQTableWidget* self, QItemSelection* selected, QItemSelection* deselected);
	void (*currentChanged)(VirtualQTableWidget* self, QModelIndex* current, QModelIndex* previous);
	void (*keyboardSearch)(VirtualQTableWidget* self, struct miqt_string search);
	QAbstractItemDelegate* (*itemDelegateForIndex)(const VirtualQTableWidget* self, QModelIndex* index);
	QVariant* (*inputMethodQuery)(const VirtualQTableWidget* self, int query);
	void (*reset)(VirtualQTableWidget* self);
	void (*selectAll)(VirtualQTableWidget* self);
	void (*dataChanged)(VirtualQTableWidget* self, QModelIndex* topLeft, QModelIndex* bottomRight, struct miqt_array /* of int */  roles);
	void (*rowsInserted)(VirtualQTableWidget* self, QModelIndex* parent, int start, int end);
	void (*rowsAboutToBeRemoved)(VirtualQTableWidget* self, QModelIndex* parent, int start, int end);
	void (*updateEditorData)(VirtualQTableWidget* self);
	void (*updateEditorGeometries)(VirtualQTableWidget* self);
	void (*verticalScrollbarValueChanged)(VirtualQTableWidget* self, int value);
	void (*horizontalScrollbarValueChanged)(VirtualQTableWidget* self, int value);
	void (*closeEditor)(VirtualQTableWidget* self, QWidget* editor, int hint);
	void (*commitData)(VirtualQTableWidget* self, QWidget* editor);
	void (*editorDestroyed)(VirtualQTableWidget* self, QObject* editor);
	bool (*edit2)(VirtualQTableWidget* self, QModelIndex* index, int trigger, QEvent* event);
	int (*selectionCommand)(const VirtualQTableWidget* self, QModelIndex* index, QEvent* event);
	void (*startDrag)(VirtualQTableWidget* self, int supportedActions);
	bool (*focusNextPrevChild)(VirtualQTableWidget* self, bool next);
	bool (*viewportEvent)(VirtualQTableWidget* self, QEvent* event);
	void (*mousePressEvent)(VirtualQTableWidget* self, QMouseEvent* event);
	void (*mouseMoveEvent)(VirtualQTableWidget* self, QMouseEvent* event);
	void (*mouseReleaseEvent)(VirtualQTableWidget* self, QMouseEvent* event);
	void (*mouseDoubleClickEvent)(VirtualQTableWidget* self, QMouseEvent* event);
	void (*dragEnterEvent)(VirtualQTableWidget* self, QDragEnterEvent* event);
	void (*dragMoveEvent)(VirtualQTableWidget* self, QDragMoveEvent* event);
	void (*dragLeaveEvent)(VirtualQTableWidget* self, QDragLeaveEvent* event);
	void (*focusInEvent)(VirtualQTableWidget* self, QFocusEvent* event);
	void (*focusOutEvent)(VirtualQTableWidget* self, QFocusEvent* event);
	void (*keyPressEvent)(VirtualQTableWidget* self, QKeyEvent* event);
	void (*resizeEvent)(VirtualQTableWidget* self, QResizeEvent* event);
	void (*inputMethodEvent)(VirtualQTableWidget* self, QInputMethodEvent* event);
	bool (*eventFilter)(VirtualQTableWidget* self, QObject* object, QEvent* event);
	QSize* (*minimumSizeHint)(const VirtualQTableWidget* self);
	QSize* (*sizeHint)(const VirtualQTableWidget* self);
	void (*setupViewport)(VirtualQTableWidget* self, QWidget* viewport);
	void (*wheelEvent)(VirtualQTableWidget* self, QWheelEvent* param1);
	void (*contextMenuEvent)(VirtualQTableWidget* self, QContextMenuEvent* param1);
	void (*changeEvent)(VirtualQTableWidget* self, QEvent* param1);
	void (*initStyleOption)(const VirtualQTableWidget* self, QStyleOptionFrame* option);
	int (*devType)(const VirtualQTableWidget* self);
	void (*setVisible)(VirtualQTableWidget* self, bool visible);
	int (*heightForWidth)(const VirtualQTableWidget* self, int param1);
	bool (*hasHeightForWidth)(const VirtualQTableWidget* self);
	QPaintEngine* (*paintEngine)(const VirtualQTableWidget* self);
	void (*keyReleaseEvent)(VirtualQTableWidget* self, QKeyEvent* event);
	void (*enterEvent)(VirtualQTableWidget* self, QEnterEvent* event);
	void (*leaveEvent)(VirtualQTableWidget* self, QEvent* event);
	void (*moveEvent)(VirtualQTableWidget* self, QMoveEvent* event);
	void (*closeEvent)(VirtualQTableWidget* self, QCloseEvent* event);
	void (*tabletEvent)(VirtualQTableWidget* self, QTabletEvent* event);
	void (*actionEvent)(VirtualQTableWidget* self, QActionEvent* event);
	void (*showEvent)(VirtualQTableWidget* self, QShowEvent* event);
	void (*hideEvent)(VirtualQTableWidget* self, QHideEvent* event);
	bool (*nativeEvent)(VirtualQTableWidget* self, struct miqt_string eventType, void* message, intptr_t* result);
	int (*metric)(const VirtualQTableWidget* self, int param1);
	void (*initPainter)(const VirtualQTableWidget* self, QPainter* painter);
	QPaintDevice* (*redirected)(const VirtualQTableWidget* self, QPoint* offset);
	QPainter* (*sharedPainter)(const VirtualQTableWidget* self);
	void (*childEvent)(VirtualQTableWidget* self, QChildEvent* event);
	void (*customEvent)(VirtualQTableWidget* self, QEvent* event);
	void (*connectNotify)(VirtualQTableWidget* self, QMetaMethod* signal);
	void (*disconnectNotify)(VirtualQTableWidget* self, QMetaMethod* signal);
}QTableWidget_VTable;

const QTableWidget_VTable* QTableWidget_vtbl(const VirtualQTableWidget* self);
void* QTableWidget_vdata(const VirtualQTableWidget* self);
void QTableWidget_setVdata(VirtualQTableWidget* self, void* vdata);

VirtualQTableWidget* QTableWidget_new(const QTableWidget_VTable* vtbl, void* vdata, QWidget* parent);
VirtualQTableWidget* QTableWidget_new2(const QTableWidget_VTable* vtbl, void* vdata);
VirtualQTableWidget* QTableWidget_new3(const QTableWidget_VTable* vtbl, void* vdata, int rows, int columns);
VirtualQTableWidget* QTableWidget_new4(const QTableWidget_VTable* vtbl, void* vdata, int rows, int columns, QWidget* parent);

void QTableWidget_virtbase(QTableWidget* src, QTableView** outptr_QTableView);
QMetaObject* QTableWidget_metaObject(const QTableWidget* self);
void* QTableWidget_metacast(QTableWidget* self, const char* param1);
int QTableWidget_metacall(QTableWidget* self, int param1, int param2, void** param3);
struct miqt_string QTableWidget_tr(const char* s);
void QTableWidget_setRowCount(QTableWidget* self, int rows);
int QTableWidget_rowCount(const QTableWidget* self);
void QTableWidget_setColumnCount(QTableWidget* self, int columns);
int QTableWidget_columnCount(const QTableWidget* self);
int QTableWidget_row(const QTableWidget* self, QTableWidgetItem* item);
int QTableWidget_column(const QTableWidget* self, QTableWidgetItem* item);
QTableWidgetItem* QTableWidget_item(const QTableWidget* self, int row, int column);
void QTableWidget_setItem(QTableWidget* self, int row, int column, QTableWidgetItem* item);
QTableWidgetItem* QTableWidget_takeItem(QTableWidget* self, int row, int column);
struct miqt_array /* of QTableWidgetItem* */  QTableWidget_items(const QTableWidget* self, QMimeData* data);
QModelIndex* QTableWidget_indexFromItem(const QTableWidget* self, QTableWidgetItem* item);
QTableWidgetItem* QTableWidget_itemFromIndex(const QTableWidget* self, QModelIndex* index);
QTableWidgetItem* QTableWidget_verticalHeaderItem(const QTableWidget* self, int row);
void QTableWidget_setVerticalHeaderItem(QTableWidget* self, int row, QTableWidgetItem* item);
QTableWidgetItem* QTableWidget_takeVerticalHeaderItem(QTableWidget* self, int row);
QTableWidgetItem* QTableWidget_horizontalHeaderItem(const QTableWidget* self, int column);
void QTableWidget_setHorizontalHeaderItem(QTableWidget* self, int column, QTableWidgetItem* item);
QTableWidgetItem* QTableWidget_takeHorizontalHeaderItem(QTableWidget* self, int column);
void QTableWidget_setVerticalHeaderLabels(QTableWidget* self, struct miqt_array /* of struct miqt_string */  labels);
void QTableWidget_setHorizontalHeaderLabels(QTableWidget* self, struct miqt_array /* of struct miqt_string */  labels);
int QTableWidget_currentRow(const QTableWidget* self);
int QTableWidget_currentColumn(const QTableWidget* self);
QTableWidgetItem* QTableWidget_currentItem(const QTableWidget* self);
void QTableWidget_setCurrentItem(QTableWidget* self, QTableWidgetItem* item);
void QTableWidget_setCurrentItem2(QTableWidget* self, QTableWidgetItem* item, int command);
void QTableWidget_setCurrentCell(QTableWidget* self, int row, int column);
void QTableWidget_setCurrentCell2(QTableWidget* self, int row, int column, int command);
void QTableWidget_sortItems(QTableWidget* self, int column);
void QTableWidget_setSortingEnabled(QTableWidget* self, bool enable);
bool QTableWidget_isSortingEnabled(const QTableWidget* self);
void QTableWidget_editItem(QTableWidget* self, QTableWidgetItem* item);
void QTableWidget_openPersistentEditor(QTableWidget* self, QTableWidgetItem* item);
void QTableWidget_closePersistentEditor(QTableWidget* self, QTableWidgetItem* item);
bool QTableWidget_isPersistentEditorOpen(const QTableWidget* self, QTableWidgetItem* item);
QWidget* QTableWidget_cellWidget(const QTableWidget* self, int row, int column);
void QTableWidget_setCellWidget(QTableWidget* self, int row, int column, QWidget* widget);
void QTableWidget_removeCellWidget(QTableWidget* self, int row, int column);
void QTableWidget_setRangeSelected(QTableWidget* self, QTableWidgetSelectionRange* range, bool select);
struct miqt_array /* of QTableWidgetSelectionRange* */  QTableWidget_selectedRanges(const QTableWidget* self);
struct miqt_array /* of QTableWidgetItem* */  QTableWidget_selectedItems(const QTableWidget* self);
struct miqt_array /* of QTableWidgetItem* */  QTableWidget_findItems(const QTableWidget* self, struct miqt_string text, int flags);
int QTableWidget_visualRow(const QTableWidget* self, int logicalRow);
int QTableWidget_visualColumn(const QTableWidget* self, int logicalColumn);
QTableWidgetItem* QTableWidget_itemAt(const QTableWidget* self, QPoint* p);
QTableWidgetItem* QTableWidget_itemAt2(const QTableWidget* self, int x, int y);
QRect* QTableWidget_visualItemRect(const QTableWidget* self, QTableWidgetItem* item);
QTableWidgetItem* QTableWidget_itemPrototype(const QTableWidget* self);
void QTableWidget_setItemPrototype(QTableWidget* self, QTableWidgetItem* item);
void QTableWidget_scrollToItem(QTableWidget* self, QTableWidgetItem* item);
void QTableWidget_insertRow(QTableWidget* self, int row);
void QTableWidget_insertColumn(QTableWidget* self, int column);
void QTableWidget_removeRow(QTableWidget* self, int row);
void QTableWidget_removeColumn(QTableWidget* self, int column);
void QTableWidget_clear(QTableWidget* self);
void QTableWidget_clearContents(QTableWidget* self);
void QTableWidget_itemPressed(QTableWidget* self, QTableWidgetItem* item);
void QTableWidget_connect_itemPressed(VirtualQTableWidget* self, intptr_t slot, void (*callback)(intptr_t, QTableWidgetItem*), void (*release)(intptr_t));
void QTableWidget_itemClicked(QTableWidget* self, QTableWidgetItem* item);
void QTableWidget_connect_itemClicked(VirtualQTableWidget* self, intptr_t slot, void (*callback)(intptr_t, QTableWidgetItem*), void (*release)(intptr_t));
void QTableWidget_itemDoubleClicked(QTableWidget* self, QTableWidgetItem* item);
void QTableWidget_connect_itemDoubleClicked(VirtualQTableWidget* self, intptr_t slot, void (*callback)(intptr_t, QTableWidgetItem*), void (*release)(intptr_t));
void QTableWidget_itemActivated(QTableWidget* self, QTableWidgetItem* item);
void QTableWidget_connect_itemActivated(VirtualQTableWidget* self, intptr_t slot, void (*callback)(intptr_t, QTableWidgetItem*), void (*release)(intptr_t));
void QTableWidget_itemEntered(QTableWidget* self, QTableWidgetItem* item);
void QTableWidget_connect_itemEntered(VirtualQTableWidget* self, intptr_t slot, void (*callback)(intptr_t, QTableWidgetItem*), void (*release)(intptr_t));
void QTableWidget_itemChanged(QTableWidget* self, QTableWidgetItem* item);
void QTableWidget_connect_itemChanged(VirtualQTableWidget* self, intptr_t slot, void (*callback)(intptr_t, QTableWidgetItem*), void (*release)(intptr_t));
void QTableWidget_currentItemChanged(QTableWidget* self, QTableWidgetItem* current, QTableWidgetItem* previous);
void QTableWidget_connect_currentItemChanged(VirtualQTableWidget* self, intptr_t slot, void (*callback)(intptr_t, QTableWidgetItem*, QTableWidgetItem*), void (*release)(intptr_t));
void QTableWidget_itemSelectionChanged(QTableWidget* self);
void QTableWidget_connect_itemSelectionChanged(VirtualQTableWidget* self, intptr_t slot, void (*callback)(intptr_t), void (*release)(intptr_t));
void QTableWidget_cellPressed(QTableWidget* self, int row, int column);
void QTableWidget_connect_cellPressed(VirtualQTableWidget* self, intptr_t slot, void (*callback)(intptr_t, int, int), void (*release)(intptr_t));
void QTableWidget_cellClicked(QTableWidget* self, int row, int column);
void QTableWidget_connect_cellClicked(VirtualQTableWidget* self, intptr_t slot, void (*callback)(intptr_t, int, int), void (*release)(intptr_t));
void QTableWidget_cellDoubleClicked(QTableWidget* self, int row, int column);
void QTableWidget_connect_cellDoubleClicked(VirtualQTableWidget* self, intptr_t slot, void (*callback)(intptr_t, int, int), void (*release)(intptr_t));
void QTableWidget_cellActivated(QTableWidget* self, int row, int column);
void QTableWidget_connect_cellActivated(VirtualQTableWidget* self, intptr_t slot, void (*callback)(intptr_t, int, int), void (*release)(intptr_t));
void QTableWidget_cellEntered(QTableWidget* self, int row, int column);
void QTableWidget_connect_cellEntered(VirtualQTableWidget* self, intptr_t slot, void (*callback)(intptr_t, int, int), void (*release)(intptr_t));
void QTableWidget_cellChanged(QTableWidget* self, int row, int column);
void QTableWidget_connect_cellChanged(VirtualQTableWidget* self, intptr_t slot, void (*callback)(intptr_t, int, int), void (*release)(intptr_t));
void QTableWidget_currentCellChanged(QTableWidget* self, int currentRow, int currentColumn, int previousRow, int previousColumn);
void QTableWidget_connect_currentCellChanged(VirtualQTableWidget* self, intptr_t slot, void (*callback)(intptr_t, int, int, int, int), void (*release)(intptr_t));
bool QTableWidget_event(QTableWidget* self, QEvent* e);
struct miqt_array /* of struct miqt_string */  QTableWidget_mimeTypes(const QTableWidget* self);
QMimeData* QTableWidget_mimeData(const QTableWidget* self, struct miqt_array /* of QTableWidgetItem* */  items);
bool QTableWidget_dropMimeData(QTableWidget* self, int row, int column, QMimeData* data, int action);
int QTableWidget_supportedDropActions(const QTableWidget* self);
void QTableWidget_dropEvent(QTableWidget* self, QDropEvent* event);
struct miqt_string QTableWidget_tr2(const char* s, const char* c);
struct miqt_string QTableWidget_tr3(const char* s, const char* c, int n);
void QTableWidget_sortItems2(QTableWidget* self, int column, int order);
void QTableWidget_scrollToItem2(QTableWidget* self, QTableWidgetItem* item, int hint);

QMetaObject* QTableWidget_virtualbase_metaObject(const VirtualQTableWidget* self);
void* QTableWidget_virtualbase_metacast(VirtualQTableWidget* self, const char* param1);
int QTableWidget_virtualbase_metacall(VirtualQTableWidget* self, int param1, int param2, void** param3);
bool QTableWidget_virtualbase_event(VirtualQTableWidget* self, QEvent* e);
struct miqt_array /* of struct miqt_string */  QTableWidget_virtualbase_mimeTypes(const VirtualQTableWidget* self);
QMimeData* QTableWidget_virtualbase_mimeData(const VirtualQTableWidget* self, struct miqt_array /* of QTableWidgetItem* */  items);
bool QTableWidget_virtualbase_dropMimeData(VirtualQTableWidget* self, int row, int column, QMimeData* data, int action);
int QTableWidget_virtualbase_supportedDropActions(const VirtualQTableWidget* self);
void QTableWidget_virtualbase_dropEvent(VirtualQTableWidget* self, QDropEvent* event);
void QTableWidget_virtualbase_setRootIndex(VirtualQTableWidget* self, QModelIndex* index);
void QTableWidget_virtualbase_setSelectionModel(VirtualQTableWidget* self, QItemSelectionModel* selectionModel);
void QTableWidget_virtualbase_doItemsLayout(VirtualQTableWidget* self);
QRect* QTableWidget_virtualbase_visualRect(const VirtualQTableWidget* self, QModelIndex* index);
void QTableWidget_virtualbase_scrollTo(VirtualQTableWidget* self, QModelIndex* index, int hint);
QModelIndex* QTableWidget_virtualbase_indexAt(const VirtualQTableWidget* self, QPoint* p);
void QTableWidget_virtualbase_scrollContentsBy(VirtualQTableWidget* self, int dx, int dy);
void QTableWidget_virtualbase_initViewItemOption(const VirtualQTableWidget* self, QStyleOptionViewItem* option);
void QTableWidget_virtualbase_paintEvent(VirtualQTableWidget* self, QPaintEvent* e);
void QTableWidget_virtualbase_timerEvent(VirtualQTableWidget* self, QTimerEvent* event);
int QTableWidget_virtualbase_horizontalOffset(const VirtualQTableWidget* self);
int QTableWidget_virtualbase_verticalOffset(const VirtualQTableWidget* self);
QModelIndex* QTableWidget_virtualbase_moveCursor(VirtualQTableWidget* self, int cursorAction, int modifiers);
void QTableWidget_virtualbase_setSelection(VirtualQTableWidget* self, QRect* rect, int command);
QRegion* QTableWidget_virtualbase_visualRegionForSelection(const VirtualQTableWidget* self, QItemSelection* selection);
struct miqt_array /* of QModelIndex* */  QTableWidget_virtualbase_selectedIndexes(const VirtualQTableWidget* self);
void QTableWidget_virtualbase_updateGeometries(VirtualQTableWidget* self);
QSize* QTableWidget_virtualbase_viewportSizeHint(const VirtualQTableWidget* self);
int QTableWidget_virtualbase_sizeHintForRow(const VirtualQTableWidget* self, int row);
int QTableWidget_virtualbase_sizeHintForColumn(const VirtualQTableWidget* self, int column);
void QTableWidget_virtualbase_verticalScrollbarAction(VirtualQTableWidget* self, int action);
void QTableWidget_virtualbase_horizontalScrollbarAction(VirtualQTableWidget* self, int action);
bool QTableWidget_virtualbase_isIndexHidden(const VirtualQTableWidget* self, QModelIndex* index);
void QTableWidget_virtualbase_selectionChanged(VirtualQTableWidget* self, QItemSelection* selected, QItemSelection* deselected);
void QTableWidget_virtualbase_currentChanged(VirtualQTableWidget* self, QModelIndex* current, QModelIndex* previous);
void QTableWidget_virtualbase_keyboardSearch(VirtualQTableWidget* self, struct miqt_string search);
QAbstractItemDelegate* QTableWidget_virtualbase_itemDelegateForIndex(const VirtualQTableWidget* self, QModelIndex* index);
QVariant* QTableWidget_virtualbase_inputMethodQuery(const VirtualQTableWidget* self, int query);
void QTableWidget_virtualbase_reset(VirtualQTableWidget* self);
void QTableWidget_virtualbase_selectAll(VirtualQTableWidget* self);
void QTableWidget_virtualbase_dataChanged(VirtualQTableWidget* self, QModelIndex* topLeft, QModelIndex* bottomRight, struct miqt_array /* of int */  roles);
void QTableWidget_virtualbase_rowsInserted(VirtualQTableWidget* self, QModelIndex* parent, int start, int end);
void QTableWidget_virtualbase_rowsAboutToBeRemoved(VirtualQTableWidget* self, QModelIndex* parent, int start, int end);
void QTableWidget_virtualbase_updateEditorData(VirtualQTableWidget* self);
void QTableWidget_virtualbase_updateEditorGeometries(VirtualQTableWidget* self);
void QTableWidget_virtualbase_verticalScrollbarValueChanged(VirtualQTableWidget* self, int value);
void QTableWidget_virtualbase_horizontalScrollbarValueChanged(VirtualQTableWidget* self, int value);
void QTableWidget_virtualbase_closeEditor(VirtualQTableWidget* self, QWidget* editor, int hint);
void QTableWidget_virtualbase_commitData(VirtualQTableWidget* self, QWidget* editor);
void QTableWidget_virtualbase_editorDestroyed(VirtualQTableWidget* self, QObject* editor);
bool QTableWidget_virtualbase_edit2(VirtualQTableWidget* self, QModelIndex* index, int trigger, QEvent* event);
int QTableWidget_virtualbase_selectionCommand(const VirtualQTableWidget* self, QModelIndex* index, QEvent* event);
void QTableWidget_virtualbase_startDrag(VirtualQTableWidget* self, int supportedActions);
bool QTableWidget_virtualbase_focusNextPrevChild(VirtualQTableWidget* self, bool next);
bool QTableWidget_virtualbase_viewportEvent(VirtualQTableWidget* self, QEvent* event);
void QTableWidget_virtualbase_mousePressEvent(VirtualQTableWidget* self, QMouseEvent* event);
void QTableWidget_virtualbase_mouseMoveEvent(VirtualQTableWidget* self, QMouseEvent* event);
void QTableWidget_virtualbase_mouseReleaseEvent(VirtualQTableWidget* self, QMouseEvent* event);
void QTableWidget_virtualbase_mouseDoubleClickEvent(VirtualQTableWidget* self, QMouseEvent* event);
void QTableWidget_virtualbase_dragEnterEvent(VirtualQTableWidget* self, QDragEnterEvent* event);
void QTableWidget_virtualbase_dragMoveEvent(VirtualQTableWidget* self, QDragMoveEvent* event);
void QTableWidget_virtualbase_dragLeaveEvent(VirtualQTableWidget* self, QDragLeaveEvent* event);
void QTableWidget_virtualbase_focusInEvent(VirtualQTableWidget* self, QFocusEvent* event);
void QTableWidget_virtualbase_focusOutEvent(VirtualQTableWidget* self, QFocusEvent* event);
void QTableWidget_virtualbase_keyPressEvent(VirtualQTableWidget* self, QKeyEvent* event);
void QTableWidget_virtualbase_resizeEvent(VirtualQTableWidget* self, QResizeEvent* event);
void QTableWidget_virtualbase_inputMethodEvent(VirtualQTableWidget* self, QInputMethodEvent* event);
bool QTableWidget_virtualbase_eventFilter(VirtualQTableWidget* self, QObject* object, QEvent* event);
QSize* QTableWidget_virtualbase_minimumSizeHint(const VirtualQTableWidget* self);
QSize* QTableWidget_virtualbase_sizeHint(const VirtualQTableWidget* self);
void QTableWidget_virtualbase_setupViewport(VirtualQTableWidget* self, QWidget* viewport);
void QTableWidget_virtualbase_wheelEvent(VirtualQTableWidget* self, QWheelEvent* param1);
void QTableWidget_virtualbase_contextMenuEvent(VirtualQTableWidget* self, QContextMenuEvent* param1);
void QTableWidget_virtualbase_changeEvent(VirtualQTableWidget* self, QEvent* param1);
void QTableWidget_virtualbase_initStyleOption(const VirtualQTableWidget* self, QStyleOptionFrame* option);
int QTableWidget_virtualbase_devType(const VirtualQTableWidget* self);
void QTableWidget_virtualbase_setVisible(VirtualQTableWidget* self, bool visible);
int QTableWidget_virtualbase_heightForWidth(const VirtualQTableWidget* self, int param1);
bool QTableWidget_virtualbase_hasHeightForWidth(const VirtualQTableWidget* self);
QPaintEngine* QTableWidget_virtualbase_paintEngine(const VirtualQTableWidget* self);
void QTableWidget_virtualbase_keyReleaseEvent(VirtualQTableWidget* self, QKeyEvent* event);
void QTableWidget_virtualbase_enterEvent(VirtualQTableWidget* self, QEnterEvent* event);
void QTableWidget_virtualbase_leaveEvent(VirtualQTableWidget* self, QEvent* event);
void QTableWidget_virtualbase_moveEvent(VirtualQTableWidget* self, QMoveEvent* event);
void QTableWidget_virtualbase_closeEvent(VirtualQTableWidget* self, QCloseEvent* event);
void QTableWidget_virtualbase_tabletEvent(VirtualQTableWidget* self, QTabletEvent* event);
void QTableWidget_virtualbase_actionEvent(VirtualQTableWidget* self, QActionEvent* event);
void QTableWidget_virtualbase_showEvent(VirtualQTableWidget* self, QShowEvent* event);
void QTableWidget_virtualbase_hideEvent(VirtualQTableWidget* self, QHideEvent* event);
bool QTableWidget_virtualbase_nativeEvent(VirtualQTableWidget* self, struct miqt_string eventType, void* message, intptr_t* result);
int QTableWidget_virtualbase_metric(const VirtualQTableWidget* self, int param1);
void QTableWidget_virtualbase_initPainter(const VirtualQTableWidget* self, QPainter* painter);
QPaintDevice* QTableWidget_virtualbase_redirected(const VirtualQTableWidget* self, QPoint* offset);
QPainter* QTableWidget_virtualbase_sharedPainter(const VirtualQTableWidget* self);
void QTableWidget_virtualbase_childEvent(VirtualQTableWidget* self, QChildEvent* event);
void QTableWidget_virtualbase_customEvent(VirtualQTableWidget* self, QEvent* event);
void QTableWidget_virtualbase_connectNotify(VirtualQTableWidget* self, QMetaMethod* signal);
void QTableWidget_virtualbase_disconnectNotify(VirtualQTableWidget* self, QMetaMethod* signal);

void QTableWidget_protectedbase_rowMoved(VirtualQTableWidget* self, int row, int oldIndex, int newIndex);
void QTableWidget_protectedbase_columnMoved(VirtualQTableWidget* self, int column, int oldIndex, int newIndex);
void QTableWidget_protectedbase_rowResized(VirtualQTableWidget* self, int row, int oldHeight, int newHeight);
void QTableWidget_protectedbase_columnResized(VirtualQTableWidget* self, int column, int oldWidth, int newWidth);
void QTableWidget_protectedbase_rowCountChanged(VirtualQTableWidget* self, int oldCount, int newCount);
void QTableWidget_protectedbase_columnCountChanged(VirtualQTableWidget* self, int oldCount, int newCount);
int QTableWidget_protectedbase_state(const VirtualQTableWidget* self);
void QTableWidget_protectedbase_setState(VirtualQTableWidget* self, int state);
void QTableWidget_protectedbase_scheduleDelayedItemsLayout(VirtualQTableWidget* self);
void QTableWidget_protectedbase_executeDelayedItemsLayout(VirtualQTableWidget* self);
void QTableWidget_protectedbase_setDirtyRegion(VirtualQTableWidget* self, QRegion* region);
void QTableWidget_protectedbase_scrollDirtyRegion(VirtualQTableWidget* self, int dx, int dy);
QPoint* QTableWidget_protectedbase_dirtyRegionOffset(const VirtualQTableWidget* self);
void QTableWidget_protectedbase_startAutoScroll(VirtualQTableWidget* self);
void QTableWidget_protectedbase_stopAutoScroll(VirtualQTableWidget* self);
void QTableWidget_protectedbase_doAutoScroll(VirtualQTableWidget* self);
int QTableWidget_protectedbase_dropIndicatorPosition(const VirtualQTableWidget* self);
void QTableWidget_protectedbase_setViewportMargins(VirtualQTableWidget* self, int left, int top, int right, int bottom);
QMargins* QTableWidget_protectedbase_viewportMargins(const VirtualQTableWidget* self);
void QTableWidget_protectedbase_drawFrame(VirtualQTableWidget* self, QPainter* param1);
void QTableWidget_protectedbase_updateMicroFocus(VirtualQTableWidget* self);
void QTableWidget_protectedbase_create(VirtualQTableWidget* self);
void QTableWidget_protectedbase_destroy(VirtualQTableWidget* self);
bool QTableWidget_protectedbase_focusNextChild(VirtualQTableWidget* self);
bool QTableWidget_protectedbase_focusPreviousChild(VirtualQTableWidget* self);
QObject* QTableWidget_protectedbase_sender(const VirtualQTableWidget* self);
int QTableWidget_protectedbase_senderSignalIndex(const VirtualQTableWidget* self);
int QTableWidget_protectedbase_receivers(const VirtualQTableWidget* self, const char* signal);
bool QTableWidget_protectedbase_isSignalConnected(const VirtualQTableWidget* self, QMetaMethod* signal);

const QMetaObject* QTableWidget_staticMetaObject();
void QTableWidget_delete(QTableWidget* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
