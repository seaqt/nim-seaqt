#pragma once
#ifndef SEAQT_QTWIDGETS_GEN_QDATETIMEEDIT_H
#define SEAQT_QTWIDGETS_GEN_QDATETIMEEDIT_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../libseaqt/libseaqt.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
class QAbstractSpinBox;
class QActionEvent;
class QCalendar;
class QCalendarWidget;
class QChildEvent;
class QCloseEvent;
class QContextMenuEvent;
class QDate;
class QDateEdit;
class QDateTime;
class QDateTimeEdit;
class QDragEnterEvent;
class QDragLeaveEvent;
class QDragMoveEvent;
class QDropEvent;
class QEvent;
class QFocusEvent;
class QHideEvent;
class QInputMethodEvent;
class QKeyEvent;
class QLineEdit;
class QMetaMethod;
class QMetaObject;
class QMouseEvent;
class QMoveEvent;
class QObject;
class QPaintDevice;
class QPaintEngine;
class QPaintEvent;
class QPainter;
class QPoint;
class QResizeEvent;
class QShowEvent;
class QSize;
class QStyleOptionSpinBox;
class QTabletEvent;
class QTime;
class QTimeEdit;
class QTimerEvent;
class QVariant;
class QWheelEvent;
class QWidget;
#else
typedef struct QAbstractSpinBox QAbstractSpinBox;
typedef struct QActionEvent QActionEvent;
typedef struct QCalendar QCalendar;
typedef struct QCalendarWidget QCalendarWidget;
typedef struct QChildEvent QChildEvent;
typedef struct QCloseEvent QCloseEvent;
typedef struct QContextMenuEvent QContextMenuEvent;
typedef struct QDate QDate;
typedef struct QDateEdit QDateEdit;
typedef struct QDateTime QDateTime;
typedef struct QDateTimeEdit QDateTimeEdit;
typedef struct QDragEnterEvent QDragEnterEvent;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEvent QEvent;
typedef struct QFocusEvent QFocusEvent;
typedef struct QHideEvent QHideEvent;
typedef struct QInputMethodEvent QInputMethodEvent;
typedef struct QKeyEvent QKeyEvent;
typedef struct QLineEdit QLineEdit;
typedef struct QMetaMethod QMetaMethod;
typedef struct QMetaObject QMetaObject;
typedef struct QMouseEvent QMouseEvent;
typedef struct QMoveEvent QMoveEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEngine QPaintEngine;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPainter QPainter;
typedef struct QPoint QPoint;
typedef struct QResizeEvent QResizeEvent;
typedef struct QShowEvent QShowEvent;
typedef struct QSize QSize;
typedef struct QStyleOptionSpinBox QStyleOptionSpinBox;
typedef struct QTabletEvent QTabletEvent;
typedef struct QTime QTime;
typedef struct QTimeEdit QTimeEdit;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

typedef struct VirtualQDateTimeEdit VirtualQDateTimeEdit;
typedef struct QDateTimeEdit_VTable{
	void (*destructor)(VirtualQDateTimeEdit* self);
	QMetaObject* (*metaObject)(const VirtualQDateTimeEdit* self);
	void* (*metacast)(VirtualQDateTimeEdit* self, const char* param1);
	int (*metacall)(VirtualQDateTimeEdit* self, int param1, int param2, void** param3);
	QSize* (*sizeHint)(const VirtualQDateTimeEdit* self);
	void (*clear)(VirtualQDateTimeEdit* self);
	void (*stepBy)(VirtualQDateTimeEdit* self, int steps);
	bool (*event)(VirtualQDateTimeEdit* self, QEvent* event);
	void (*keyPressEvent)(VirtualQDateTimeEdit* self, QKeyEvent* event);
	void (*wheelEvent)(VirtualQDateTimeEdit* self, QWheelEvent* event);
	void (*focusInEvent)(VirtualQDateTimeEdit* self, QFocusEvent* event);
	bool (*focusNextPrevChild)(VirtualQDateTimeEdit* self, bool next);
	int (*validate)(const VirtualQDateTimeEdit* self, struct miqt_string input, int* pos);
	void (*fixup)(const VirtualQDateTimeEdit* self, struct miqt_string input);
	QDateTime* (*dateTimeFromText)(const VirtualQDateTimeEdit* self, struct miqt_string text);
	struct miqt_string (*textFromDateTime)(const VirtualQDateTimeEdit* self, QDateTime* dt);
	int (*stepEnabled)(const VirtualQDateTimeEdit* self);
	void (*mousePressEvent)(VirtualQDateTimeEdit* self, QMouseEvent* event);
	void (*paintEvent)(VirtualQDateTimeEdit* self, QPaintEvent* event);
	QSize* (*minimumSizeHint)(const VirtualQDateTimeEdit* self);
	QVariant* (*inputMethodQuery)(const VirtualQDateTimeEdit* self, int param1);
	void (*resizeEvent)(VirtualQDateTimeEdit* self, QResizeEvent* event);
	void (*keyReleaseEvent)(VirtualQDateTimeEdit* self, QKeyEvent* event);
	void (*focusOutEvent)(VirtualQDateTimeEdit* self, QFocusEvent* event);
	void (*contextMenuEvent)(VirtualQDateTimeEdit* self, QContextMenuEvent* event);
	void (*changeEvent)(VirtualQDateTimeEdit* self, QEvent* event);
	void (*closeEvent)(VirtualQDateTimeEdit* self, QCloseEvent* event);
	void (*hideEvent)(VirtualQDateTimeEdit* self, QHideEvent* event);
	void (*mouseReleaseEvent)(VirtualQDateTimeEdit* self, QMouseEvent* event);
	void (*mouseMoveEvent)(VirtualQDateTimeEdit* self, QMouseEvent* event);
	void (*timerEvent)(VirtualQDateTimeEdit* self, QTimerEvent* event);
	void (*showEvent)(VirtualQDateTimeEdit* self, QShowEvent* event);
	int (*devType)(const VirtualQDateTimeEdit* self);
	void (*setVisible)(VirtualQDateTimeEdit* self, bool visible);
	int (*heightForWidth)(const VirtualQDateTimeEdit* self, int param1);
	bool (*hasHeightForWidth)(const VirtualQDateTimeEdit* self);
	QPaintEngine* (*paintEngine)(const VirtualQDateTimeEdit* self);
	void (*mouseDoubleClickEvent)(VirtualQDateTimeEdit* self, QMouseEvent* event);
	void (*enterEvent)(VirtualQDateTimeEdit* self, QEvent* event);
	void (*leaveEvent)(VirtualQDateTimeEdit* self, QEvent* event);
	void (*moveEvent)(VirtualQDateTimeEdit* self, QMoveEvent* event);
	void (*tabletEvent)(VirtualQDateTimeEdit* self, QTabletEvent* event);
	void (*actionEvent)(VirtualQDateTimeEdit* self, QActionEvent* event);
	void (*dragEnterEvent)(VirtualQDateTimeEdit* self, QDragEnterEvent* event);
	void (*dragMoveEvent)(VirtualQDateTimeEdit* self, QDragMoveEvent* event);
	void (*dragLeaveEvent)(VirtualQDateTimeEdit* self, QDragLeaveEvent* event);
	void (*dropEvent)(VirtualQDateTimeEdit* self, QDropEvent* event);
	bool (*nativeEvent)(VirtualQDateTimeEdit* self, struct miqt_string eventType, void* message, long* result);
	int (*metric)(const VirtualQDateTimeEdit* self, int param1);
	void (*initPainter)(const VirtualQDateTimeEdit* self, QPainter* painter);
	QPaintDevice* (*redirected)(const VirtualQDateTimeEdit* self, QPoint* offset);
	QPainter* (*sharedPainter)(const VirtualQDateTimeEdit* self);
	void (*inputMethodEvent)(VirtualQDateTimeEdit* self, QInputMethodEvent* param1);
	bool (*eventFilter)(VirtualQDateTimeEdit* self, QObject* watched, QEvent* event);
	void (*childEvent)(VirtualQDateTimeEdit* self, QChildEvent* event);
	void (*customEvent)(VirtualQDateTimeEdit* self, QEvent* event);
	void (*connectNotify)(VirtualQDateTimeEdit* self, QMetaMethod* signal);
	void (*disconnectNotify)(VirtualQDateTimeEdit* self, QMetaMethod* signal);
}QDateTimeEdit_VTable;

const QDateTimeEdit_VTable* QDateTimeEdit_vtbl(const VirtualQDateTimeEdit* self);
void* QDateTimeEdit_vdata(const VirtualQDateTimeEdit* self);
void QDateTimeEdit_setVdata(VirtualQDateTimeEdit* self, void* vdata);

VirtualQDateTimeEdit* QDateTimeEdit_new(const QDateTimeEdit_VTable* vtbl, void* vdata, QWidget* parent);
VirtualQDateTimeEdit* QDateTimeEdit_new2(const QDateTimeEdit_VTable* vtbl, void* vdata);
VirtualQDateTimeEdit* QDateTimeEdit_new3(const QDateTimeEdit_VTable* vtbl, void* vdata, QDateTime* dt);
VirtualQDateTimeEdit* QDateTimeEdit_new4(const QDateTimeEdit_VTable* vtbl, void* vdata, QDate* d);
VirtualQDateTimeEdit* QDateTimeEdit_new5(const QDateTimeEdit_VTable* vtbl, void* vdata, QTime* t);
VirtualQDateTimeEdit* QDateTimeEdit_new6(const QDateTimeEdit_VTable* vtbl, void* vdata, QDateTime* dt, QWidget* parent);
VirtualQDateTimeEdit* QDateTimeEdit_new7(const QDateTimeEdit_VTable* vtbl, void* vdata, QDate* d, QWidget* parent);
VirtualQDateTimeEdit* QDateTimeEdit_new8(const QDateTimeEdit_VTable* vtbl, void* vdata, QTime* t, QWidget* parent);

void QDateTimeEdit_virtbase(QDateTimeEdit* src, QAbstractSpinBox** outptr_QAbstractSpinBox);
QMetaObject* QDateTimeEdit_metaObject(const QDateTimeEdit* self);
void* QDateTimeEdit_metacast(QDateTimeEdit* self, const char* param1);
int QDateTimeEdit_metacall(QDateTimeEdit* self, int param1, int param2, void** param3);
struct miqt_string QDateTimeEdit_tr(const char* s);
struct miqt_string QDateTimeEdit_trUtf8(const char* s);
QDateTime* QDateTimeEdit_dateTime(const QDateTimeEdit* self);
QDate* QDateTimeEdit_date(const QDateTimeEdit* self);
QTime* QDateTimeEdit_time(const QDateTimeEdit* self);
QCalendar* QDateTimeEdit_calendar(const QDateTimeEdit* self);
void QDateTimeEdit_setCalendar(QDateTimeEdit* self, QCalendar* calendar);
QDateTime* QDateTimeEdit_minimumDateTime(const QDateTimeEdit* self);
void QDateTimeEdit_clearMinimumDateTime(QDateTimeEdit* self);
void QDateTimeEdit_setMinimumDateTime(QDateTimeEdit* self, QDateTime* dt);
QDateTime* QDateTimeEdit_maximumDateTime(const QDateTimeEdit* self);
void QDateTimeEdit_clearMaximumDateTime(QDateTimeEdit* self);
void QDateTimeEdit_setMaximumDateTime(QDateTimeEdit* self, QDateTime* dt);
void QDateTimeEdit_setDateTimeRange(QDateTimeEdit* self, QDateTime* min, QDateTime* max);
QDate* QDateTimeEdit_minimumDate(const QDateTimeEdit* self);
void QDateTimeEdit_setMinimumDate(QDateTimeEdit* self, QDate* min);
void QDateTimeEdit_clearMinimumDate(QDateTimeEdit* self);
QDate* QDateTimeEdit_maximumDate(const QDateTimeEdit* self);
void QDateTimeEdit_setMaximumDate(QDateTimeEdit* self, QDate* max);
void QDateTimeEdit_clearMaximumDate(QDateTimeEdit* self);
void QDateTimeEdit_setDateRange(QDateTimeEdit* self, QDate* min, QDate* max);
QTime* QDateTimeEdit_minimumTime(const QDateTimeEdit* self);
void QDateTimeEdit_setMinimumTime(QDateTimeEdit* self, QTime* min);
void QDateTimeEdit_clearMinimumTime(QDateTimeEdit* self);
QTime* QDateTimeEdit_maximumTime(const QDateTimeEdit* self);
void QDateTimeEdit_setMaximumTime(QDateTimeEdit* self, QTime* max);
void QDateTimeEdit_clearMaximumTime(QDateTimeEdit* self);
void QDateTimeEdit_setTimeRange(QDateTimeEdit* self, QTime* min, QTime* max);
int QDateTimeEdit_displayedSections(const QDateTimeEdit* self);
int QDateTimeEdit_currentSection(const QDateTimeEdit* self);
int QDateTimeEdit_sectionAt(const QDateTimeEdit* self, int index);
void QDateTimeEdit_setCurrentSection(QDateTimeEdit* self, int section);
int QDateTimeEdit_currentSectionIndex(const QDateTimeEdit* self);
void QDateTimeEdit_setCurrentSectionIndex(QDateTimeEdit* self, int index);
QCalendarWidget* QDateTimeEdit_calendarWidget(const QDateTimeEdit* self);
void QDateTimeEdit_setCalendarWidget(QDateTimeEdit* self, QCalendarWidget* calendarWidget);
int QDateTimeEdit_sectionCount(const QDateTimeEdit* self);
void QDateTimeEdit_setSelectedSection(QDateTimeEdit* self, int section);
struct miqt_string QDateTimeEdit_sectionText(const QDateTimeEdit* self, int section);
struct miqt_string QDateTimeEdit_displayFormat(const QDateTimeEdit* self);
void QDateTimeEdit_setDisplayFormat(QDateTimeEdit* self, struct miqt_string format);
bool QDateTimeEdit_calendarPopup(const QDateTimeEdit* self);
void QDateTimeEdit_setCalendarPopup(QDateTimeEdit* self, bool enable);
int QDateTimeEdit_timeSpec(const QDateTimeEdit* self);
void QDateTimeEdit_setTimeSpec(QDateTimeEdit* self, int spec);
QSize* QDateTimeEdit_sizeHint(const QDateTimeEdit* self);
void QDateTimeEdit_clear(QDateTimeEdit* self);
void QDateTimeEdit_stepBy(QDateTimeEdit* self, int steps);
bool QDateTimeEdit_event(QDateTimeEdit* self, QEvent* event);
void QDateTimeEdit_dateTimeChanged(QDateTimeEdit* self, QDateTime* dateTime);
void QDateTimeEdit_connect_dateTimeChanged(VirtualQDateTimeEdit* self, intptr_t slot, void (*callback)(intptr_t, QDateTime*), void (*release)(intptr_t));
void QDateTimeEdit_timeChanged(QDateTimeEdit* self, QTime* time);
void QDateTimeEdit_connect_timeChanged(VirtualQDateTimeEdit* self, intptr_t slot, void (*callback)(intptr_t, QTime*), void (*release)(intptr_t));
void QDateTimeEdit_dateChanged(QDateTimeEdit* self, QDate* date);
void QDateTimeEdit_connect_dateChanged(VirtualQDateTimeEdit* self, intptr_t slot, void (*callback)(intptr_t, QDate*), void (*release)(intptr_t));
void QDateTimeEdit_setDateTime(QDateTimeEdit* self, QDateTime* dateTime);
void QDateTimeEdit_setDate(QDateTimeEdit* self, QDate* date);
void QDateTimeEdit_setTime(QDateTimeEdit* self, QTime* time);
void QDateTimeEdit_keyPressEvent(QDateTimeEdit* self, QKeyEvent* event);
void QDateTimeEdit_wheelEvent(QDateTimeEdit* self, QWheelEvent* event);
void QDateTimeEdit_focusInEvent(QDateTimeEdit* self, QFocusEvent* event);
bool QDateTimeEdit_focusNextPrevChild(QDateTimeEdit* self, bool next);
int QDateTimeEdit_validate(const QDateTimeEdit* self, struct miqt_string input, int* pos);
void QDateTimeEdit_fixup(const QDateTimeEdit* self, struct miqt_string input);
QDateTime* QDateTimeEdit_dateTimeFromText(const QDateTimeEdit* self, struct miqt_string text);
struct miqt_string QDateTimeEdit_textFromDateTime(const QDateTimeEdit* self, QDateTime* dt);
int QDateTimeEdit_stepEnabled(const QDateTimeEdit* self);
void QDateTimeEdit_mousePressEvent(QDateTimeEdit* self, QMouseEvent* event);
void QDateTimeEdit_paintEvent(QDateTimeEdit* self, QPaintEvent* event);
struct miqt_string QDateTimeEdit_tr2(const char* s, const char* c);
struct miqt_string QDateTimeEdit_tr3(const char* s, const char* c, int n);
struct miqt_string QDateTimeEdit_trUtf82(const char* s, const char* c);
struct miqt_string QDateTimeEdit_trUtf83(const char* s, const char* c, int n);

QMetaObject* QDateTimeEdit_virtualbase_metaObject(const VirtualQDateTimeEdit* self);
void* QDateTimeEdit_virtualbase_metacast(VirtualQDateTimeEdit* self, const char* param1);
int QDateTimeEdit_virtualbase_metacall(VirtualQDateTimeEdit* self, int param1, int param2, void** param3);
QSize* QDateTimeEdit_virtualbase_sizeHint(const VirtualQDateTimeEdit* self);
void QDateTimeEdit_virtualbase_clear(VirtualQDateTimeEdit* self);
void QDateTimeEdit_virtualbase_stepBy(VirtualQDateTimeEdit* self, int steps);
bool QDateTimeEdit_virtualbase_event(VirtualQDateTimeEdit* self, QEvent* event);
void QDateTimeEdit_virtualbase_keyPressEvent(VirtualQDateTimeEdit* self, QKeyEvent* event);
void QDateTimeEdit_virtualbase_wheelEvent(VirtualQDateTimeEdit* self, QWheelEvent* event);
void QDateTimeEdit_virtualbase_focusInEvent(VirtualQDateTimeEdit* self, QFocusEvent* event);
bool QDateTimeEdit_virtualbase_focusNextPrevChild(VirtualQDateTimeEdit* self, bool next);
int QDateTimeEdit_virtualbase_validate(const VirtualQDateTimeEdit* self, struct miqt_string input, int* pos);
void QDateTimeEdit_virtualbase_fixup(const VirtualQDateTimeEdit* self, struct miqt_string input);
QDateTime* QDateTimeEdit_virtualbase_dateTimeFromText(const VirtualQDateTimeEdit* self, struct miqt_string text);
struct miqt_string QDateTimeEdit_virtualbase_textFromDateTime(const VirtualQDateTimeEdit* self, QDateTime* dt);
int QDateTimeEdit_virtualbase_stepEnabled(const VirtualQDateTimeEdit* self);
void QDateTimeEdit_virtualbase_mousePressEvent(VirtualQDateTimeEdit* self, QMouseEvent* event);
void QDateTimeEdit_virtualbase_paintEvent(VirtualQDateTimeEdit* self, QPaintEvent* event);
QSize* QDateTimeEdit_virtualbase_minimumSizeHint(const VirtualQDateTimeEdit* self);
QVariant* QDateTimeEdit_virtualbase_inputMethodQuery(const VirtualQDateTimeEdit* self, int param1);
void QDateTimeEdit_virtualbase_resizeEvent(VirtualQDateTimeEdit* self, QResizeEvent* event);
void QDateTimeEdit_virtualbase_keyReleaseEvent(VirtualQDateTimeEdit* self, QKeyEvent* event);
void QDateTimeEdit_virtualbase_focusOutEvent(VirtualQDateTimeEdit* self, QFocusEvent* event);
void QDateTimeEdit_virtualbase_contextMenuEvent(VirtualQDateTimeEdit* self, QContextMenuEvent* event);
void QDateTimeEdit_virtualbase_changeEvent(VirtualQDateTimeEdit* self, QEvent* event);
void QDateTimeEdit_virtualbase_closeEvent(VirtualQDateTimeEdit* self, QCloseEvent* event);
void QDateTimeEdit_virtualbase_hideEvent(VirtualQDateTimeEdit* self, QHideEvent* event);
void QDateTimeEdit_virtualbase_mouseReleaseEvent(VirtualQDateTimeEdit* self, QMouseEvent* event);
void QDateTimeEdit_virtualbase_mouseMoveEvent(VirtualQDateTimeEdit* self, QMouseEvent* event);
void QDateTimeEdit_virtualbase_timerEvent(VirtualQDateTimeEdit* self, QTimerEvent* event);
void QDateTimeEdit_virtualbase_showEvent(VirtualQDateTimeEdit* self, QShowEvent* event);
int QDateTimeEdit_virtualbase_devType(const VirtualQDateTimeEdit* self);
void QDateTimeEdit_virtualbase_setVisible(VirtualQDateTimeEdit* self, bool visible);
int QDateTimeEdit_virtualbase_heightForWidth(const VirtualQDateTimeEdit* self, int param1);
bool QDateTimeEdit_virtualbase_hasHeightForWidth(const VirtualQDateTimeEdit* self);
QPaintEngine* QDateTimeEdit_virtualbase_paintEngine(const VirtualQDateTimeEdit* self);
void QDateTimeEdit_virtualbase_mouseDoubleClickEvent(VirtualQDateTimeEdit* self, QMouseEvent* event);
void QDateTimeEdit_virtualbase_enterEvent(VirtualQDateTimeEdit* self, QEvent* event);
void QDateTimeEdit_virtualbase_leaveEvent(VirtualQDateTimeEdit* self, QEvent* event);
void QDateTimeEdit_virtualbase_moveEvent(VirtualQDateTimeEdit* self, QMoveEvent* event);
void QDateTimeEdit_virtualbase_tabletEvent(VirtualQDateTimeEdit* self, QTabletEvent* event);
void QDateTimeEdit_virtualbase_actionEvent(VirtualQDateTimeEdit* self, QActionEvent* event);
void QDateTimeEdit_virtualbase_dragEnterEvent(VirtualQDateTimeEdit* self, QDragEnterEvent* event);
void QDateTimeEdit_virtualbase_dragMoveEvent(VirtualQDateTimeEdit* self, QDragMoveEvent* event);
void QDateTimeEdit_virtualbase_dragLeaveEvent(VirtualQDateTimeEdit* self, QDragLeaveEvent* event);
void QDateTimeEdit_virtualbase_dropEvent(VirtualQDateTimeEdit* self, QDropEvent* event);
bool QDateTimeEdit_virtualbase_nativeEvent(VirtualQDateTimeEdit* self, struct miqt_string eventType, void* message, long* result);
int QDateTimeEdit_virtualbase_metric(const VirtualQDateTimeEdit* self, int param1);
void QDateTimeEdit_virtualbase_initPainter(const VirtualQDateTimeEdit* self, QPainter* painter);
QPaintDevice* QDateTimeEdit_virtualbase_redirected(const VirtualQDateTimeEdit* self, QPoint* offset);
QPainter* QDateTimeEdit_virtualbase_sharedPainter(const VirtualQDateTimeEdit* self);
void QDateTimeEdit_virtualbase_inputMethodEvent(VirtualQDateTimeEdit* self, QInputMethodEvent* param1);
bool QDateTimeEdit_virtualbase_eventFilter(VirtualQDateTimeEdit* self, QObject* watched, QEvent* event);
void QDateTimeEdit_virtualbase_childEvent(VirtualQDateTimeEdit* self, QChildEvent* event);
void QDateTimeEdit_virtualbase_customEvent(VirtualQDateTimeEdit* self, QEvent* event);
void QDateTimeEdit_virtualbase_connectNotify(VirtualQDateTimeEdit* self, QMetaMethod* signal);
void QDateTimeEdit_virtualbase_disconnectNotify(VirtualQDateTimeEdit* self, QMetaMethod* signal);

void QDateTimeEdit_protectedbase_initStyleOption(const VirtualQDateTimeEdit* self, QStyleOptionSpinBox* option);
QLineEdit* QDateTimeEdit_protectedbase_lineEdit(const VirtualQDateTimeEdit* self);
void QDateTimeEdit_protectedbase_setLineEdit(VirtualQDateTimeEdit* self, QLineEdit* edit);
void QDateTimeEdit_protectedbase_updateMicroFocus(VirtualQDateTimeEdit* self);
void QDateTimeEdit_protectedbase_create(VirtualQDateTimeEdit* self);
void QDateTimeEdit_protectedbase_destroy(VirtualQDateTimeEdit* self);
bool QDateTimeEdit_protectedbase_focusNextChild(VirtualQDateTimeEdit* self);
bool QDateTimeEdit_protectedbase_focusPreviousChild(VirtualQDateTimeEdit* self);
QObject* QDateTimeEdit_protectedbase_sender(const VirtualQDateTimeEdit* self);
int QDateTimeEdit_protectedbase_senderSignalIndex(const VirtualQDateTimeEdit* self);
int QDateTimeEdit_protectedbase_receivers(const VirtualQDateTimeEdit* self, const char* signal);
bool QDateTimeEdit_protectedbase_isSignalConnected(const VirtualQDateTimeEdit* self, QMetaMethod* signal);

const QMetaObject* QDateTimeEdit_staticMetaObject();
void QDateTimeEdit_delete(QDateTimeEdit* self);

typedef struct VirtualQTimeEdit VirtualQTimeEdit;
typedef struct QTimeEdit_VTable{
	void (*destructor)(VirtualQTimeEdit* self);
	QMetaObject* (*metaObject)(const VirtualQTimeEdit* self);
	void* (*metacast)(VirtualQTimeEdit* self, const char* param1);
	int (*metacall)(VirtualQTimeEdit* self, int param1, int param2, void** param3);
	QSize* (*sizeHint)(const VirtualQTimeEdit* self);
	void (*clear)(VirtualQTimeEdit* self);
	void (*stepBy)(VirtualQTimeEdit* self, int steps);
	bool (*event)(VirtualQTimeEdit* self, QEvent* event);
	void (*keyPressEvent)(VirtualQTimeEdit* self, QKeyEvent* event);
	void (*wheelEvent)(VirtualQTimeEdit* self, QWheelEvent* event);
	void (*focusInEvent)(VirtualQTimeEdit* self, QFocusEvent* event);
	bool (*focusNextPrevChild)(VirtualQTimeEdit* self, bool next);
	int (*validate)(const VirtualQTimeEdit* self, struct miqt_string input, int* pos);
	void (*fixup)(const VirtualQTimeEdit* self, struct miqt_string input);
	QDateTime* (*dateTimeFromText)(const VirtualQTimeEdit* self, struct miqt_string text);
	struct miqt_string (*textFromDateTime)(const VirtualQTimeEdit* self, QDateTime* dt);
	int (*stepEnabled)(const VirtualQTimeEdit* self);
	void (*mousePressEvent)(VirtualQTimeEdit* self, QMouseEvent* event);
	void (*paintEvent)(VirtualQTimeEdit* self, QPaintEvent* event);
	QSize* (*minimumSizeHint)(const VirtualQTimeEdit* self);
	QVariant* (*inputMethodQuery)(const VirtualQTimeEdit* self, int param1);
	void (*resizeEvent)(VirtualQTimeEdit* self, QResizeEvent* event);
	void (*keyReleaseEvent)(VirtualQTimeEdit* self, QKeyEvent* event);
	void (*focusOutEvent)(VirtualQTimeEdit* self, QFocusEvent* event);
	void (*contextMenuEvent)(VirtualQTimeEdit* self, QContextMenuEvent* event);
	void (*changeEvent)(VirtualQTimeEdit* self, QEvent* event);
	void (*closeEvent)(VirtualQTimeEdit* self, QCloseEvent* event);
	void (*hideEvent)(VirtualQTimeEdit* self, QHideEvent* event);
	void (*mouseReleaseEvent)(VirtualQTimeEdit* self, QMouseEvent* event);
	void (*mouseMoveEvent)(VirtualQTimeEdit* self, QMouseEvent* event);
	void (*timerEvent)(VirtualQTimeEdit* self, QTimerEvent* event);
	void (*showEvent)(VirtualQTimeEdit* self, QShowEvent* event);
	int (*devType)(const VirtualQTimeEdit* self);
	void (*setVisible)(VirtualQTimeEdit* self, bool visible);
	int (*heightForWidth)(const VirtualQTimeEdit* self, int param1);
	bool (*hasHeightForWidth)(const VirtualQTimeEdit* self);
	QPaintEngine* (*paintEngine)(const VirtualQTimeEdit* self);
	void (*mouseDoubleClickEvent)(VirtualQTimeEdit* self, QMouseEvent* event);
	void (*enterEvent)(VirtualQTimeEdit* self, QEvent* event);
	void (*leaveEvent)(VirtualQTimeEdit* self, QEvent* event);
	void (*moveEvent)(VirtualQTimeEdit* self, QMoveEvent* event);
	void (*tabletEvent)(VirtualQTimeEdit* self, QTabletEvent* event);
	void (*actionEvent)(VirtualQTimeEdit* self, QActionEvent* event);
	void (*dragEnterEvent)(VirtualQTimeEdit* self, QDragEnterEvent* event);
	void (*dragMoveEvent)(VirtualQTimeEdit* self, QDragMoveEvent* event);
	void (*dragLeaveEvent)(VirtualQTimeEdit* self, QDragLeaveEvent* event);
	void (*dropEvent)(VirtualQTimeEdit* self, QDropEvent* event);
	bool (*nativeEvent)(VirtualQTimeEdit* self, struct miqt_string eventType, void* message, long* result);
	int (*metric)(const VirtualQTimeEdit* self, int param1);
	void (*initPainter)(const VirtualQTimeEdit* self, QPainter* painter);
	QPaintDevice* (*redirected)(const VirtualQTimeEdit* self, QPoint* offset);
	QPainter* (*sharedPainter)(const VirtualQTimeEdit* self);
	void (*inputMethodEvent)(VirtualQTimeEdit* self, QInputMethodEvent* param1);
	bool (*eventFilter)(VirtualQTimeEdit* self, QObject* watched, QEvent* event);
	void (*childEvent)(VirtualQTimeEdit* self, QChildEvent* event);
	void (*customEvent)(VirtualQTimeEdit* self, QEvent* event);
	void (*connectNotify)(VirtualQTimeEdit* self, QMetaMethod* signal);
	void (*disconnectNotify)(VirtualQTimeEdit* self, QMetaMethod* signal);
}QTimeEdit_VTable;

const QTimeEdit_VTable* QTimeEdit_vtbl(const VirtualQTimeEdit* self);
void* QTimeEdit_vdata(const VirtualQTimeEdit* self);
void QTimeEdit_setVdata(VirtualQTimeEdit* self, void* vdata);

VirtualQTimeEdit* QTimeEdit_new(const QTimeEdit_VTable* vtbl, void* vdata, QWidget* parent);
VirtualQTimeEdit* QTimeEdit_new2(const QTimeEdit_VTable* vtbl, void* vdata);
VirtualQTimeEdit* QTimeEdit_new3(const QTimeEdit_VTable* vtbl, void* vdata, QTime* time);
VirtualQTimeEdit* QTimeEdit_new4(const QTimeEdit_VTable* vtbl, void* vdata, QTime* time, QWidget* parent);

void QTimeEdit_virtbase(QTimeEdit* src, QDateTimeEdit** outptr_QDateTimeEdit);
QMetaObject* QTimeEdit_metaObject(const QTimeEdit* self);
void* QTimeEdit_metacast(QTimeEdit* self, const char* param1);
int QTimeEdit_metacall(QTimeEdit* self, int param1, int param2, void** param3);
struct miqt_string QTimeEdit_tr(const char* s);
struct miqt_string QTimeEdit_trUtf8(const char* s);
void QTimeEdit_userTimeChanged(QTimeEdit* self, QTime* time);
void QTimeEdit_connect_userTimeChanged(VirtualQTimeEdit* self, intptr_t slot, void (*callback)(intptr_t, QTime*), void (*release)(intptr_t));
struct miqt_string QTimeEdit_tr2(const char* s, const char* c);
struct miqt_string QTimeEdit_tr3(const char* s, const char* c, int n);
struct miqt_string QTimeEdit_trUtf82(const char* s, const char* c);
struct miqt_string QTimeEdit_trUtf83(const char* s, const char* c, int n);

QMetaObject* QTimeEdit_virtualbase_metaObject(const VirtualQTimeEdit* self);
void* QTimeEdit_virtualbase_metacast(VirtualQTimeEdit* self, const char* param1);
int QTimeEdit_virtualbase_metacall(VirtualQTimeEdit* self, int param1, int param2, void** param3);
QSize* QTimeEdit_virtualbase_sizeHint(const VirtualQTimeEdit* self);
void QTimeEdit_virtualbase_clear(VirtualQTimeEdit* self);
void QTimeEdit_virtualbase_stepBy(VirtualQTimeEdit* self, int steps);
bool QTimeEdit_virtualbase_event(VirtualQTimeEdit* self, QEvent* event);
void QTimeEdit_virtualbase_keyPressEvent(VirtualQTimeEdit* self, QKeyEvent* event);
void QTimeEdit_virtualbase_wheelEvent(VirtualQTimeEdit* self, QWheelEvent* event);
void QTimeEdit_virtualbase_focusInEvent(VirtualQTimeEdit* self, QFocusEvent* event);
bool QTimeEdit_virtualbase_focusNextPrevChild(VirtualQTimeEdit* self, bool next);
int QTimeEdit_virtualbase_validate(const VirtualQTimeEdit* self, struct miqt_string input, int* pos);
void QTimeEdit_virtualbase_fixup(const VirtualQTimeEdit* self, struct miqt_string input);
QDateTime* QTimeEdit_virtualbase_dateTimeFromText(const VirtualQTimeEdit* self, struct miqt_string text);
struct miqt_string QTimeEdit_virtualbase_textFromDateTime(const VirtualQTimeEdit* self, QDateTime* dt);
int QTimeEdit_virtualbase_stepEnabled(const VirtualQTimeEdit* self);
void QTimeEdit_virtualbase_mousePressEvent(VirtualQTimeEdit* self, QMouseEvent* event);
void QTimeEdit_virtualbase_paintEvent(VirtualQTimeEdit* self, QPaintEvent* event);
QSize* QTimeEdit_virtualbase_minimumSizeHint(const VirtualQTimeEdit* self);
QVariant* QTimeEdit_virtualbase_inputMethodQuery(const VirtualQTimeEdit* self, int param1);
void QTimeEdit_virtualbase_resizeEvent(VirtualQTimeEdit* self, QResizeEvent* event);
void QTimeEdit_virtualbase_keyReleaseEvent(VirtualQTimeEdit* self, QKeyEvent* event);
void QTimeEdit_virtualbase_focusOutEvent(VirtualQTimeEdit* self, QFocusEvent* event);
void QTimeEdit_virtualbase_contextMenuEvent(VirtualQTimeEdit* self, QContextMenuEvent* event);
void QTimeEdit_virtualbase_changeEvent(VirtualQTimeEdit* self, QEvent* event);
void QTimeEdit_virtualbase_closeEvent(VirtualQTimeEdit* self, QCloseEvent* event);
void QTimeEdit_virtualbase_hideEvent(VirtualQTimeEdit* self, QHideEvent* event);
void QTimeEdit_virtualbase_mouseReleaseEvent(VirtualQTimeEdit* self, QMouseEvent* event);
void QTimeEdit_virtualbase_mouseMoveEvent(VirtualQTimeEdit* self, QMouseEvent* event);
void QTimeEdit_virtualbase_timerEvent(VirtualQTimeEdit* self, QTimerEvent* event);
void QTimeEdit_virtualbase_showEvent(VirtualQTimeEdit* self, QShowEvent* event);
int QTimeEdit_virtualbase_devType(const VirtualQTimeEdit* self);
void QTimeEdit_virtualbase_setVisible(VirtualQTimeEdit* self, bool visible);
int QTimeEdit_virtualbase_heightForWidth(const VirtualQTimeEdit* self, int param1);
bool QTimeEdit_virtualbase_hasHeightForWidth(const VirtualQTimeEdit* self);
QPaintEngine* QTimeEdit_virtualbase_paintEngine(const VirtualQTimeEdit* self);
void QTimeEdit_virtualbase_mouseDoubleClickEvent(VirtualQTimeEdit* self, QMouseEvent* event);
void QTimeEdit_virtualbase_enterEvent(VirtualQTimeEdit* self, QEvent* event);
void QTimeEdit_virtualbase_leaveEvent(VirtualQTimeEdit* self, QEvent* event);
void QTimeEdit_virtualbase_moveEvent(VirtualQTimeEdit* self, QMoveEvent* event);
void QTimeEdit_virtualbase_tabletEvent(VirtualQTimeEdit* self, QTabletEvent* event);
void QTimeEdit_virtualbase_actionEvent(VirtualQTimeEdit* self, QActionEvent* event);
void QTimeEdit_virtualbase_dragEnterEvent(VirtualQTimeEdit* self, QDragEnterEvent* event);
void QTimeEdit_virtualbase_dragMoveEvent(VirtualQTimeEdit* self, QDragMoveEvent* event);
void QTimeEdit_virtualbase_dragLeaveEvent(VirtualQTimeEdit* self, QDragLeaveEvent* event);
void QTimeEdit_virtualbase_dropEvent(VirtualQTimeEdit* self, QDropEvent* event);
bool QTimeEdit_virtualbase_nativeEvent(VirtualQTimeEdit* self, struct miqt_string eventType, void* message, long* result);
int QTimeEdit_virtualbase_metric(const VirtualQTimeEdit* self, int param1);
void QTimeEdit_virtualbase_initPainter(const VirtualQTimeEdit* self, QPainter* painter);
QPaintDevice* QTimeEdit_virtualbase_redirected(const VirtualQTimeEdit* self, QPoint* offset);
QPainter* QTimeEdit_virtualbase_sharedPainter(const VirtualQTimeEdit* self);
void QTimeEdit_virtualbase_inputMethodEvent(VirtualQTimeEdit* self, QInputMethodEvent* param1);
bool QTimeEdit_virtualbase_eventFilter(VirtualQTimeEdit* self, QObject* watched, QEvent* event);
void QTimeEdit_virtualbase_childEvent(VirtualQTimeEdit* self, QChildEvent* event);
void QTimeEdit_virtualbase_customEvent(VirtualQTimeEdit* self, QEvent* event);
void QTimeEdit_virtualbase_connectNotify(VirtualQTimeEdit* self, QMetaMethod* signal);
void QTimeEdit_virtualbase_disconnectNotify(VirtualQTimeEdit* self, QMetaMethod* signal);

void QTimeEdit_protectedbase_initStyleOption(const VirtualQTimeEdit* self, QStyleOptionSpinBox* option);
QLineEdit* QTimeEdit_protectedbase_lineEdit(const VirtualQTimeEdit* self);
void QTimeEdit_protectedbase_setLineEdit(VirtualQTimeEdit* self, QLineEdit* edit);
void QTimeEdit_protectedbase_updateMicroFocus(VirtualQTimeEdit* self);
void QTimeEdit_protectedbase_create(VirtualQTimeEdit* self);
void QTimeEdit_protectedbase_destroy(VirtualQTimeEdit* self);
bool QTimeEdit_protectedbase_focusNextChild(VirtualQTimeEdit* self);
bool QTimeEdit_protectedbase_focusPreviousChild(VirtualQTimeEdit* self);
QObject* QTimeEdit_protectedbase_sender(const VirtualQTimeEdit* self);
int QTimeEdit_protectedbase_senderSignalIndex(const VirtualQTimeEdit* self);
int QTimeEdit_protectedbase_receivers(const VirtualQTimeEdit* self, const char* signal);
bool QTimeEdit_protectedbase_isSignalConnected(const VirtualQTimeEdit* self, QMetaMethod* signal);

const QMetaObject* QTimeEdit_staticMetaObject();
void QTimeEdit_delete(QTimeEdit* self);

typedef struct VirtualQDateEdit VirtualQDateEdit;
typedef struct QDateEdit_VTable{
	void (*destructor)(VirtualQDateEdit* self);
	QMetaObject* (*metaObject)(const VirtualQDateEdit* self);
	void* (*metacast)(VirtualQDateEdit* self, const char* param1);
	int (*metacall)(VirtualQDateEdit* self, int param1, int param2, void** param3);
	QSize* (*sizeHint)(const VirtualQDateEdit* self);
	void (*clear)(VirtualQDateEdit* self);
	void (*stepBy)(VirtualQDateEdit* self, int steps);
	bool (*event)(VirtualQDateEdit* self, QEvent* event);
	void (*keyPressEvent)(VirtualQDateEdit* self, QKeyEvent* event);
	void (*wheelEvent)(VirtualQDateEdit* self, QWheelEvent* event);
	void (*focusInEvent)(VirtualQDateEdit* self, QFocusEvent* event);
	bool (*focusNextPrevChild)(VirtualQDateEdit* self, bool next);
	int (*validate)(const VirtualQDateEdit* self, struct miqt_string input, int* pos);
	void (*fixup)(const VirtualQDateEdit* self, struct miqt_string input);
	QDateTime* (*dateTimeFromText)(const VirtualQDateEdit* self, struct miqt_string text);
	struct miqt_string (*textFromDateTime)(const VirtualQDateEdit* self, QDateTime* dt);
	int (*stepEnabled)(const VirtualQDateEdit* self);
	void (*mousePressEvent)(VirtualQDateEdit* self, QMouseEvent* event);
	void (*paintEvent)(VirtualQDateEdit* self, QPaintEvent* event);
	QSize* (*minimumSizeHint)(const VirtualQDateEdit* self);
	QVariant* (*inputMethodQuery)(const VirtualQDateEdit* self, int param1);
	void (*resizeEvent)(VirtualQDateEdit* self, QResizeEvent* event);
	void (*keyReleaseEvent)(VirtualQDateEdit* self, QKeyEvent* event);
	void (*focusOutEvent)(VirtualQDateEdit* self, QFocusEvent* event);
	void (*contextMenuEvent)(VirtualQDateEdit* self, QContextMenuEvent* event);
	void (*changeEvent)(VirtualQDateEdit* self, QEvent* event);
	void (*closeEvent)(VirtualQDateEdit* self, QCloseEvent* event);
	void (*hideEvent)(VirtualQDateEdit* self, QHideEvent* event);
	void (*mouseReleaseEvent)(VirtualQDateEdit* self, QMouseEvent* event);
	void (*mouseMoveEvent)(VirtualQDateEdit* self, QMouseEvent* event);
	void (*timerEvent)(VirtualQDateEdit* self, QTimerEvent* event);
	void (*showEvent)(VirtualQDateEdit* self, QShowEvent* event);
	int (*devType)(const VirtualQDateEdit* self);
	void (*setVisible)(VirtualQDateEdit* self, bool visible);
	int (*heightForWidth)(const VirtualQDateEdit* self, int param1);
	bool (*hasHeightForWidth)(const VirtualQDateEdit* self);
	QPaintEngine* (*paintEngine)(const VirtualQDateEdit* self);
	void (*mouseDoubleClickEvent)(VirtualQDateEdit* self, QMouseEvent* event);
	void (*enterEvent)(VirtualQDateEdit* self, QEvent* event);
	void (*leaveEvent)(VirtualQDateEdit* self, QEvent* event);
	void (*moveEvent)(VirtualQDateEdit* self, QMoveEvent* event);
	void (*tabletEvent)(VirtualQDateEdit* self, QTabletEvent* event);
	void (*actionEvent)(VirtualQDateEdit* self, QActionEvent* event);
	void (*dragEnterEvent)(VirtualQDateEdit* self, QDragEnterEvent* event);
	void (*dragMoveEvent)(VirtualQDateEdit* self, QDragMoveEvent* event);
	void (*dragLeaveEvent)(VirtualQDateEdit* self, QDragLeaveEvent* event);
	void (*dropEvent)(VirtualQDateEdit* self, QDropEvent* event);
	bool (*nativeEvent)(VirtualQDateEdit* self, struct miqt_string eventType, void* message, long* result);
	int (*metric)(const VirtualQDateEdit* self, int param1);
	void (*initPainter)(const VirtualQDateEdit* self, QPainter* painter);
	QPaintDevice* (*redirected)(const VirtualQDateEdit* self, QPoint* offset);
	QPainter* (*sharedPainter)(const VirtualQDateEdit* self);
	void (*inputMethodEvent)(VirtualQDateEdit* self, QInputMethodEvent* param1);
	bool (*eventFilter)(VirtualQDateEdit* self, QObject* watched, QEvent* event);
	void (*childEvent)(VirtualQDateEdit* self, QChildEvent* event);
	void (*customEvent)(VirtualQDateEdit* self, QEvent* event);
	void (*connectNotify)(VirtualQDateEdit* self, QMetaMethod* signal);
	void (*disconnectNotify)(VirtualQDateEdit* self, QMetaMethod* signal);
}QDateEdit_VTable;

const QDateEdit_VTable* QDateEdit_vtbl(const VirtualQDateEdit* self);
void* QDateEdit_vdata(const VirtualQDateEdit* self);
void QDateEdit_setVdata(VirtualQDateEdit* self, void* vdata);

VirtualQDateEdit* QDateEdit_new(const QDateEdit_VTable* vtbl, void* vdata, QWidget* parent);
VirtualQDateEdit* QDateEdit_new2(const QDateEdit_VTable* vtbl, void* vdata);
VirtualQDateEdit* QDateEdit_new3(const QDateEdit_VTable* vtbl, void* vdata, QDate* date);
VirtualQDateEdit* QDateEdit_new4(const QDateEdit_VTable* vtbl, void* vdata, QDate* date, QWidget* parent);

void QDateEdit_virtbase(QDateEdit* src, QDateTimeEdit** outptr_QDateTimeEdit);
QMetaObject* QDateEdit_metaObject(const QDateEdit* self);
void* QDateEdit_metacast(QDateEdit* self, const char* param1);
int QDateEdit_metacall(QDateEdit* self, int param1, int param2, void** param3);
struct miqt_string QDateEdit_tr(const char* s);
struct miqt_string QDateEdit_trUtf8(const char* s);
void QDateEdit_userDateChanged(QDateEdit* self, QDate* date);
void QDateEdit_connect_userDateChanged(VirtualQDateEdit* self, intptr_t slot, void (*callback)(intptr_t, QDate*), void (*release)(intptr_t));
struct miqt_string QDateEdit_tr2(const char* s, const char* c);
struct miqt_string QDateEdit_tr3(const char* s, const char* c, int n);
struct miqt_string QDateEdit_trUtf82(const char* s, const char* c);
struct miqt_string QDateEdit_trUtf83(const char* s, const char* c, int n);

QMetaObject* QDateEdit_virtualbase_metaObject(const VirtualQDateEdit* self);
void* QDateEdit_virtualbase_metacast(VirtualQDateEdit* self, const char* param1);
int QDateEdit_virtualbase_metacall(VirtualQDateEdit* self, int param1, int param2, void** param3);
QSize* QDateEdit_virtualbase_sizeHint(const VirtualQDateEdit* self);
void QDateEdit_virtualbase_clear(VirtualQDateEdit* self);
void QDateEdit_virtualbase_stepBy(VirtualQDateEdit* self, int steps);
bool QDateEdit_virtualbase_event(VirtualQDateEdit* self, QEvent* event);
void QDateEdit_virtualbase_keyPressEvent(VirtualQDateEdit* self, QKeyEvent* event);
void QDateEdit_virtualbase_wheelEvent(VirtualQDateEdit* self, QWheelEvent* event);
void QDateEdit_virtualbase_focusInEvent(VirtualQDateEdit* self, QFocusEvent* event);
bool QDateEdit_virtualbase_focusNextPrevChild(VirtualQDateEdit* self, bool next);
int QDateEdit_virtualbase_validate(const VirtualQDateEdit* self, struct miqt_string input, int* pos);
void QDateEdit_virtualbase_fixup(const VirtualQDateEdit* self, struct miqt_string input);
QDateTime* QDateEdit_virtualbase_dateTimeFromText(const VirtualQDateEdit* self, struct miqt_string text);
struct miqt_string QDateEdit_virtualbase_textFromDateTime(const VirtualQDateEdit* self, QDateTime* dt);
int QDateEdit_virtualbase_stepEnabled(const VirtualQDateEdit* self);
void QDateEdit_virtualbase_mousePressEvent(VirtualQDateEdit* self, QMouseEvent* event);
void QDateEdit_virtualbase_paintEvent(VirtualQDateEdit* self, QPaintEvent* event);
QSize* QDateEdit_virtualbase_minimumSizeHint(const VirtualQDateEdit* self);
QVariant* QDateEdit_virtualbase_inputMethodQuery(const VirtualQDateEdit* self, int param1);
void QDateEdit_virtualbase_resizeEvent(VirtualQDateEdit* self, QResizeEvent* event);
void QDateEdit_virtualbase_keyReleaseEvent(VirtualQDateEdit* self, QKeyEvent* event);
void QDateEdit_virtualbase_focusOutEvent(VirtualQDateEdit* self, QFocusEvent* event);
void QDateEdit_virtualbase_contextMenuEvent(VirtualQDateEdit* self, QContextMenuEvent* event);
void QDateEdit_virtualbase_changeEvent(VirtualQDateEdit* self, QEvent* event);
void QDateEdit_virtualbase_closeEvent(VirtualQDateEdit* self, QCloseEvent* event);
void QDateEdit_virtualbase_hideEvent(VirtualQDateEdit* self, QHideEvent* event);
void QDateEdit_virtualbase_mouseReleaseEvent(VirtualQDateEdit* self, QMouseEvent* event);
void QDateEdit_virtualbase_mouseMoveEvent(VirtualQDateEdit* self, QMouseEvent* event);
void QDateEdit_virtualbase_timerEvent(VirtualQDateEdit* self, QTimerEvent* event);
void QDateEdit_virtualbase_showEvent(VirtualQDateEdit* self, QShowEvent* event);
int QDateEdit_virtualbase_devType(const VirtualQDateEdit* self);
void QDateEdit_virtualbase_setVisible(VirtualQDateEdit* self, bool visible);
int QDateEdit_virtualbase_heightForWidth(const VirtualQDateEdit* self, int param1);
bool QDateEdit_virtualbase_hasHeightForWidth(const VirtualQDateEdit* self);
QPaintEngine* QDateEdit_virtualbase_paintEngine(const VirtualQDateEdit* self);
void QDateEdit_virtualbase_mouseDoubleClickEvent(VirtualQDateEdit* self, QMouseEvent* event);
void QDateEdit_virtualbase_enterEvent(VirtualQDateEdit* self, QEvent* event);
void QDateEdit_virtualbase_leaveEvent(VirtualQDateEdit* self, QEvent* event);
void QDateEdit_virtualbase_moveEvent(VirtualQDateEdit* self, QMoveEvent* event);
void QDateEdit_virtualbase_tabletEvent(VirtualQDateEdit* self, QTabletEvent* event);
void QDateEdit_virtualbase_actionEvent(VirtualQDateEdit* self, QActionEvent* event);
void QDateEdit_virtualbase_dragEnterEvent(VirtualQDateEdit* self, QDragEnterEvent* event);
void QDateEdit_virtualbase_dragMoveEvent(VirtualQDateEdit* self, QDragMoveEvent* event);
void QDateEdit_virtualbase_dragLeaveEvent(VirtualQDateEdit* self, QDragLeaveEvent* event);
void QDateEdit_virtualbase_dropEvent(VirtualQDateEdit* self, QDropEvent* event);
bool QDateEdit_virtualbase_nativeEvent(VirtualQDateEdit* self, struct miqt_string eventType, void* message, long* result);
int QDateEdit_virtualbase_metric(const VirtualQDateEdit* self, int param1);
void QDateEdit_virtualbase_initPainter(const VirtualQDateEdit* self, QPainter* painter);
QPaintDevice* QDateEdit_virtualbase_redirected(const VirtualQDateEdit* self, QPoint* offset);
QPainter* QDateEdit_virtualbase_sharedPainter(const VirtualQDateEdit* self);
void QDateEdit_virtualbase_inputMethodEvent(VirtualQDateEdit* self, QInputMethodEvent* param1);
bool QDateEdit_virtualbase_eventFilter(VirtualQDateEdit* self, QObject* watched, QEvent* event);
void QDateEdit_virtualbase_childEvent(VirtualQDateEdit* self, QChildEvent* event);
void QDateEdit_virtualbase_customEvent(VirtualQDateEdit* self, QEvent* event);
void QDateEdit_virtualbase_connectNotify(VirtualQDateEdit* self, QMetaMethod* signal);
void QDateEdit_virtualbase_disconnectNotify(VirtualQDateEdit* self, QMetaMethod* signal);

void QDateEdit_protectedbase_initStyleOption(const VirtualQDateEdit* self, QStyleOptionSpinBox* option);
QLineEdit* QDateEdit_protectedbase_lineEdit(const VirtualQDateEdit* self);
void QDateEdit_protectedbase_setLineEdit(VirtualQDateEdit* self, QLineEdit* edit);
void QDateEdit_protectedbase_updateMicroFocus(VirtualQDateEdit* self);
void QDateEdit_protectedbase_create(VirtualQDateEdit* self);
void QDateEdit_protectedbase_destroy(VirtualQDateEdit* self);
bool QDateEdit_protectedbase_focusNextChild(VirtualQDateEdit* self);
bool QDateEdit_protectedbase_focusPreviousChild(VirtualQDateEdit* self);
QObject* QDateEdit_protectedbase_sender(const VirtualQDateEdit* self);
int QDateEdit_protectedbase_senderSignalIndex(const VirtualQDateEdit* self);
int QDateEdit_protectedbase_receivers(const VirtualQDateEdit* self, const char* signal);
bool QDateEdit_protectedbase_isSignalConnected(const VirtualQDateEdit* self, QMetaMethod* signal);

const QMetaObject* QDateEdit_staticMetaObject();
void QDateEdit_delete(QDateEdit* self);

#ifdef __cplusplus
} /* extern C */
#endif

#endif
